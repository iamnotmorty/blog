<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Java面试题-基础</title>
    <link href="undefined2019/09/30/java-offer01/"/>
    <url>2019/09/30/java-offer01/</url>
    
    <content type="html"><![CDATA[<p>第一部分，Java基础题目，共17粒。附带常量池和堆内存简介。</p><a id="more"></a><h2 id="Java基础"><a href="#Java基础" class="headerlink" title="Java基础"></a>Java基础</h2><h3 id="1-JDK和JRE有什么区别？"><a href="#1-JDK和JRE有什么区别？" class="headerlink" title="1.JDK和JRE有什么区别？"></a>1.JDK和JRE有什么区别？</h3><ul><li>JDK：Java Development Kit 的简称，java 开发工具包，提供了 java 的开发环境和运行环境。</li><li>JRE：Java Runtime Environment 的简称，java 运行环境，为 java 的运行提供了所需环境。</li></ul><p>具体来说 JDK 其实包含了 JRE，同时还包含了编译 java 源码的编译器 javac，还包含了很多 java 程序调试和分析的工具。简单来说：如果你需要运行 java 程序，只需安装 JRE 就可以了，如果你需要编写 java 程序，需要安装 JDK。</p><h3 id="2-和-equals-的区别是什么？"><a href="#2-和-equals-的区别是什么？" class="headerlink" title="2.== 和 equals 的区别是什么？"></a>2.== 和 equals 的区别是什么？</h3><p>==：<br>对于基本类型和引用类型 == 的作用效果是不同的。</p><ul><li>基本类型：比较的是值是否相同；</li><li>引用类型：比较的是引用是否相同；</li></ul><p>equals：<br>equals 本质上就是 ==，只不过 String 和 Integer 等重写了 equals 方法，把它变成了值比较。</p><h3 id="3-两个对象的-hashCode-相同，则-equals-也一定为-true，对吗？"><a href="#3-两个对象的-hashCode-相同，则-equals-也一定为-true，对吗？" class="headerlink" title="3.两个对象的 hashCode()相同，则 equals()也一定为 true，对吗？"></a>3.两个对象的 hashCode()相同，则 equals()也一定为 true，对吗？</h3><p>不对，两个对象的 hashCode()相同，equals()不一定 true。例如在散列表中，hashCode()相等即两个键值对的哈希值相等，然而哈希值相等，并不一定能得出键值对相等。</p><h3 id="4-final-在-java-中有什么作用？"><a href="#4-final-在-java-中有什么作用？" class="headerlink" title="4.final 在 java 中有什么作用？"></a>4.final 在 java 中有什么作用？</h3><ul><li>final 修饰的类叫最终类，该类不能被继承。</li><li>final 修饰的方法不能被重写。</li><li>final 修饰的变量叫常量，常量必须初始化，初始化之后值就不能被修改。</li></ul><h3 id="5-java-中的-Math-round-1-5-等于多少？"><a href="#5-java-中的-Math-round-1-5-等于多少？" class="headerlink" title="5.java 中的 Math.round(-1.5) 等于多少？"></a>5.java 中的 Math.round(-1.5) 等于多少？</h3><p>等于 -1，因为在数轴上取值时，中间值（0.5）向右取整，所以正 0.5 是往上取整，负 0.5 是直接舍弃。</p><h3 id="6-String-属于基础的数据类型吗？"><a href="#6-String-属于基础的数据类型吗？" class="headerlink" title="6.String 属于基础的数据类型吗？"></a>6.String 属于基础的数据类型吗？</h3><p>String 不属于基础类型，基础类型有 8 种：byte、boolean、char、short、int、float、long、double，而 String 属于对象。</p><h3 id="7-java-中操作字符串都有哪些类？它们之间有什么区别？"><a href="#7-java-中操作字符串都有哪些类？它们之间有什么区别？" class="headerlink" title="7.java 中操作字符串都有哪些类？它们之间有什么区别？"></a>7.java 中操作字符串都有哪些类？它们之间有什么区别？</h3><p>操作字符串的类有：String、StringBuffer、StringBuilder。</p><p>String 和 StringBuffer、StringBuilder 的区别在于 String 声明的是不可变的对象，每次操作都会生成新的 String 对象，然后将指针指向新的 String 对象，而 StringBuffer、StringBuilder 可以在原有对象的基础上进行操作，所以在经常改变字符串内容的情况下最好不要使用 String。</p><p>StringBuffer 和 StringBuilder 最大的区别在于，StringBuffer 是线程安全的，而 StringBuilder 是非线程安全的，但 StringBuilder 的性能却高于 StringBuffer，所以在单线程环境下推荐使用 StringBuilder，多线程环境下推荐使用 StringBuffer。</p><h3 id="8-String-str-”i”与-String-str-new-String-“i”-一样吗？"><a href="#8-String-str-”i”与-String-str-new-String-“i”-一样吗？" class="headerlink" title="8.String str=”i”与 String str=new String(“i”)一样吗？"></a>8.String str=”i”与 String str=new String(“i”)一样吗？</h3><p>不一样，因为内存的分配方式不一样。String str=”i”的方式，java 虚拟机会将其分配到常量池中；而 String str=new String(“i”) 则会被分到堆内存中。</p><h3 id="9-如何将字符串反转？"><a href="#9-如何将字符串反转？" class="headerlink" title="9.如何将字符串反转？"></a>9.如何将字符串反转？</h3><p>使用 StringBuilder 或者 stringBuffer 的 reverse() 方法。</p><pre><code class="java">// StringBuffer reverseStringBuffer stringBuffer = new StringBuffer();stringBuffer.append(&quot;abcdefg&quot;);System.out.println(stringBuffer.reverse()); // gfedcba// StringBuilder reverseStringBuilder stringBuilder = new StringBuilder();stringBuilder.append(&quot;abcdefg&quot;);System.out.println(stringBuilder.reverse()); // gfedcba</code></pre><p>也可以自己遍历实现</p><h3 id="10-String-类的常用方法都有那些？"><a href="#10-String-类的常用方法都有那些？" class="headerlink" title="10.String 类的常用方法都有那些？"></a>10.String 类的常用方法都有那些？</h3><ul><li>indexOf()：返回指定字符的索引。</li><li>charAt()：返回指定索引处的字符。</li><li>replace()：字符串替换。</li><li>trim()：去除字符串两端空白。</li><li>split()：分割字符串，返回一个分割后的字符串数组。</li><li>getBytes()：返回字符串的 byte 类型数组。</li><li>length()：返回字符串长度。</li><li>toLowerCase()：将字符串转成小写字母。</li><li>toUpperCase()：将字符串转成大写字符。</li><li>substring()：截取字符串。</li><li>equals()：字符串比较。</li></ul><h3 id="11-抽象类必须要有抽象方法吗？"><a href="#11-抽象类必须要有抽象方法吗？" class="headerlink" title="11.抽象类必须要有抽象方法吗？"></a>11.抽象类必须要有抽象方法吗？</h3><p>不需要，抽象类不一定非要有抽象方法。</p><h3 id="12-普通类和抽象类有哪些区别？"><a href="#12-普通类和抽象类有哪些区别？" class="headerlink" title="12.普通类和抽象类有哪些区别？"></a>12.普通类和抽象类有哪些区别？</h3><ul><li>普通类不能包含抽象方法，抽象类可以包含抽象方法。</li><li>抽象类不能直接实例化，普通类可以直接实例化。</li></ul><h3 id="13-抽象类能使用-final-修饰吗？"><a href="#13-抽象类能使用-final-修饰吗？" class="headerlink" title="13.抽象类能使用 final 修饰吗？"></a>13.抽象类能使用 final 修饰吗？</h3><p>不能，定义抽象类就是让其他类继承的，如果定义为 final 该类就不能被继承，这样彼此就会产生矛盾，所以 final 不能修饰抽象类，如下图所示，编辑器也会提示错误信息。</p><h3 id="14-接口和抽象类有什么区别？"><a href="#14-接口和抽象类有什么区别？" class="headerlink" title="14.接口和抽象类有什么区别？"></a>14.接口和抽象类有什么区别？</h3><ul><li>实现：抽象类的子类使用 extends 来继承；接口必须使用 implements 来实现接口。</li><li>构造函数：抽象类可以有构造函数；接口不能有。</li><li>main 方法：抽象类可以有 main 方法，并且我们能运行它；接口不能有 main 方法。</li><li>实现数量：类可以实现很多个接口；但是只能继承一个抽象类。</li><li>访问修饰符：接口中的方法默认使用 public 修饰；抽象类中的方法可以是任意访问修饰符。</li></ul><h3 id="15-java-中-IO-流分为几种？"><a href="#15-java-中-IO-流分为几种？" class="headerlink" title="15.java 中 IO 流分为几种？"></a>15.java 中 IO 流分为几种？</h3><p>按功能来分：输入流（input）、输出流（output）。</p><p>按类型来分：字节流和字符流。</p><p>字节流和字符流的区别是：字节流按 8 位传输以字节为单位输入输出数据，字符流按 16 位传输以字符为单位输入输出数据。</p><h3 id="16-BIO、NIO、AIO-有什么区别？"><a href="#16-BIO、NIO、AIO-有什么区别？" class="headerlink" title="16.BIO、NIO、AIO 有什么区别？"></a>16.BIO、NIO、AIO 有什么区别？</h3><ul><li>BIO：Block IO 同步阻塞式 IO，就是我们平常使用的传统 IO，它的特点是模式简单使用方便，并发处理能力低。</li><li>NIO：New IO 同步非阻塞 IO，是传统 IO 的升级，客户端和服务器端通过 Channel（通道）通讯，实现了多路复用。</li><li>AIO：Asynchronous IO 是 NIO 的升级，也叫 NIO2，实现了异步非堵塞 IO ，异步 IO 的操作基于事件和回调机制。</li></ul><h3 id="17-Files的常用方法都有哪些？"><a href="#17-Files的常用方法都有哪些？" class="headerlink" title="17.Files的常用方法都有哪些？"></a>17.Files的常用方法都有哪些？</h3><ul><li>Files.exists()：检测文件路径是否存在。</li><li>Files.createFile()：创建文件。</li><li>Files.createDirectory()：创建文件夹。</li><li>Files.delete()：删除一个文件或目录。</li><li>Files.copy()：复制文件。</li><li>Files.move()：移动文件。</li><li>Files.size()：查看文件个数。</li><li>Files.read()：读取文件。</li><li>Files.write()：写入文件。</li></ul><hr><h3 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h3><h4 id="说说对常量池对理解"><a href="#说说对常量池对理解" class="headerlink" title="说说对常量池对理解"></a>说说对常量池对理解</h4><p>常量池有两种，一种是编译阶段生成的在 *.class 文件中的常量池(Constant Pool)。另一种是运行时在方法区中的运行时常量池(Runtime Constant Pool)。</p><ul><li><p>在 *.class 文件中，最头的4个字节用于存储魔数(Magic Number)，用于确定一个文件是否能被JVM接受，再接着4个字节用于存储版本号，前2个字节存储次版本号，后2个存储主版本号，再接着是用于存放常量的常量池，由于常量的数量是不固定的，所以常量池的入口放置一个U2类型的数据(constant_pool_count)存储常量池容量计数值。<br>常量池主要用于存放两大类常量：字面量(Literal)和符号引用量(Symbolic References)，字面量相当于Java语言层面常量的概念，如文本字符串，声明为final的常量值等，符号引用则属于编译原理方面的概念，包括了如下三种类型的常量：类和接口的全限定名;字段名称和描述符;方法名称和描述符.</p></li><li><p>运行时常量池是方法区的一部分。*.cLass 文件中除了有类的版本、字段、方法、接口等描述信息外，还有一项信息是常量池，用于存放编译期生成的各种字面量和符号引用，这部分内容将在类加载后进入方法区的运行时常量池中存放。</p></li></ul><p>运行时常量池相对于 *.class 文件中的常量池的另外一个重要特征是具备动态性，Java语言并不要求常量一定只有编译期才能产生，也就是并非预置入 *.class 文件中的常量池的内容才能进入方法区的运行时常量池，运行期间也可能将新的常量放入池中，这种特性被开发人员利用比较多的就是String类的intern()方法。</p><p>常量池的作用：<br>常量池是为了避免频繁的创建和销毁对象而影响系统性能，其实现了对象的共享。<br>例如字符串常量池，在编译阶段就把所有的字符串文字放到一个常量池中。<br>（1）节省内存空间：常量池中所有相同的字符串常量被合并，只占用一个空间。<br>（2）节省运行时间：比较字符串时，==比equals()快。对于两个引用变量，只用==判断引用是否相等，也就可以判断实际值是否相等。</p><h4 id="说说什么是堆内存"><a href="#说说什么是堆内存" class="headerlink" title="说说什么是堆内存"></a>说说什么是堆内存</h4><ul><li>是被线程共享的一块内存区域，创建的对象和数组都保存在 Java 堆内存中，也是垃圾收集器进行 垃圾收集的最重要的内存区域。由于现代 VM 采用分代收集算法, 因此 Java 堆从 GC 的角度还可以 细分为: 新生代(Eden 区、From Survivor 区和 To Survivor 区)和老年代。</li></ul><p>这里又涉及到 GC 相关的内容。一个点一个的深挖下去都是一片汪洋。</p>]]></content>
    
    
    <categories>
      
      <category>Java面试题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用travis ci持续集成hexo博客，实现自动化部署</title>
    <link href="undefined2019/09/29/hexo-travis/"/>
    <url>2019/09/29/hexo-travis/</url>
    
    <content type="html"><![CDATA[<p>最近用Hexo从新搭建博客，结果涨了一波见识，认识了Travis CI这个东西。</p><a id="more"></a><h2 id="Travis-CI是什么？"><a href="#Travis-CI是什么？" class="headerlink" title="Travis CI是什么？"></a>Travis CI是什么？</h2><h3 id="什么是CI？"><a href="#什么是CI？" class="headerlink" title="什么是CI？"></a>什么是CI？</h3><p>CI（持续集成）：只要有代码变更，就会触发CI服务器，对项目进行自动化构建，测试以及最终的自动化部署。</p><p>Travis CI也就是一个在线的CI服务。傻瓜式操作，与github是好基友，只要你的github项目是public，你就可以免费使用。</p><h2 id="集成实现自动化部署"><a href="#集成实现自动化部署" class="headerlink" title="集成实现自动化部署"></a>集成实现自动化部署</h2><p>记得很早之前搭建hexo博客的时候，还没有这个操作，当时有个很大的问题，就是换了电脑会非常麻烦。现在有了这个操作，真的是如有神助。</p><p>以下是官网文档：</p><hr><p>1.新建一个 repository。如果你希望你的站点能通过 &lt;你的 GitHub 用户名&gt;.github.io 域名访问，你的 repository 应该直接命名为 &lt;你的 GitHub 用户名&gt;.github.io。<br>2.将你的 Hexo 站点文件夹推送到 repository 中。默认情况下不应该 public 目录将不会被推送到 repository 中，你应该检查 .gitignore 文件中是否包含 public 一行，如果没有请加上。<br>3.将 Travis CI 添加到你的 GitHub 账户中。<br>4.前往 GitHub 的 Applications settings，配置 Travis CI 权限，使其能够访问你的 repository。<br>5.你应该会被重定向到 Travis CI 的页面。如果没有，请 手动前往。<br>6.在浏览器新建一个标签页，前往 GitHub 新建 Personal Access Token，只勾选 repo 的权限并生成一个新的 Token。Token 生成后请复制并保存好。<br>7.回到 Travis CI，前往你的 repository 的设置页面，在 Environment Variables 下新建一个环境变量，Name 为 GH_TOKEN，Value 为刚才你在 GitHub 生成的 Token。确保 DISPLAY VALUE IN BUILD LOG 保持 不被勾选 避免你的 Token 泄漏。点击 Add 保存。<br>8.在你的 Hexo 站点文件夹中新建一个 .travis.yml 文件：</p><pre><code class="yml">sudo: falselanguage: node_jsnode_js:  - 10 # use nodejs v10 LTScache: npmbranches:  only:    - master # build master branch onlyscript:  - hexo generate # generate static filesdeploy:  provider: pages  skip-cleanup: true  github-token: $GH_TOKEN  keep-history: true  on:    branch: master  local-dir: public</code></pre><p>9.将 .travis.yml 推送到 repository 中。Travis CI 应该会自动开始运行，并将生成的文件推送到同一 repository 下的 gh-pages 分支下<br>10.在 GitHub 中前往你的 repository 的设置页面，修改 GitHub Pages 的部署分支为 gh-pages。<br>11.前往 https://&lt;你的 GitHub 用户名&gt;.github.io 查看你的站点是否可以访问。这可能需要一些时间。</p><hr><p>直接按照官网的方法，存在一定的问题。</p><p>1.用 &lt;你的 GitHub 用户名&gt;.github.io 命名的项目，Travis CI 无法给我们自动新建 gh-pages 分支。<br>2.无法修改 GitHub Pages 的展示分支，默认是 master。也就达不到我们用 master 来管理博客（跟换电脑只需拉代码即可），用 gh—pages 部署静态博客以展示的目的。</p><p>个人实践后建议，新建项目的时候不要用 &lt;你的 GitHub 用户名&gt;.github.io 这样的方式命名，直接用别的名称命名。这样的话上面两个问题直接解决。</p><p>有人会说，那我怎么用 &lt;你的 GitHub 用户名&gt;.github.io 这个地址访问博客呢。其实很简单 &lt;你的 GitHub 用户名&gt;.github.io/&lt;项目名称&gt; 这个地址接可以访问。可以看看项目的 Setting 里的 GitHub Pages 相关的配置就很直观了。</p><p><img src="https://s2.ax1x.com/2019/09/29/u8rM1x.md.jpg" srcset="/blog/img/loading.gif" alt="GitHub Pages"></p><p>最后在注意一个问题，这样修改以后有些主题的静态资源就无法正常访问了，注意很重要的一个配置，根目录下的_config.yml里面的url和root配置需要更改</p><pre><code class="yml"># URL## If your site is put in a subdirectory, set url as &#39;http://yoursite.com/child&#39; and root as &#39;/child/&#39;url: https://iamnotmorty.github.io/blogroot: /blog/permalink: :year/:month/:day/:title/permalink_defaults:</code></pre><p>这里还会有个坑在，就是即使这样修改了，静态资源诸如css/js之类的还是无法加载，部署上去以后就会有问题。这时就要看看主题里面的页面是如何获取这些资源的路径的，找到相应的配置或者代码中进行修改，所以会有一定的差异。这里本人也有个疑问，就是官方说的会添加根路径，难道不是配置文件里的？有待求证，简单暴力的做法就是找到相应位置补全路径，有一些会有配置文件，改一下就好里。</p><p>后续会继续补充Hexo遇到的坑，以及Travis CI和持续集成相关的内容。</p>]]></content>
    
    
    
    <tags>
      
      <tag>Travis CI</tag>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World（测试文章）</title>
    <link href="undefined2019/09/28/hello-world/"/>
    <url>2019/09/28/hello-world/</url>
    
    <content type="html"><![CDATA[<p>未雨绸缪，富有耐心，律己严格，不偏不倚。</p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>