<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Java面试题-多线程</title>
    <link href="undefined2019/10/14/java-offer03-thread/"/>
    <url>2019/10/14/java-offer03-thread/</url>
    
    <content type="html"><![CDATA[<p>多线程常见题目，一共22粒。</p><a id="more"></a><h2 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h2><h3 id="35-并行和并发有什么区别？"><a href="#35-并行和并发有什么区别？" class="headerlink" title="35. 并行和并发有什么区别？"></a>35. 并行和并发有什么区别？</h3><ul><li>并行是指两个或者多个事件在同一时刻发生；而并发是指两个或多个事件在同一时间间隔发生。</li><li>并行是在不同实体上的多个事件，并发是在同一实体上的多个事件。</li><li>在一台处理器上“同时”处理多个任务，在多台处理器上同时处理多个任务。如hadoop分布式集群。</li></ul><h3 id="36-线程和进程的区别？"><a href="#36-线程和进程的区别？" class="headerlink" title="36. 线程和进程的区别？"></a>36. 线程和进程的区别？</h3><p>简而言之，进程是程序运行和资源分配的基本单位，一个程序至少有一个进程，一个进程至少有一个线程。进程在执行过程中拥有独立的内存单元，而多个线程共享内存资源，减少切换次数，从而效率更高。线程是进程的一个实体，是cpu调度和分派的基本单位，是比程序更小的能独立运行的基本单位。同一进程中的多个线程之间可以并发执行。</p><h3 id="37-守护线程是什么？"><a href="#37-守护线程是什么？" class="headerlink" title="37. 守护线程是什么？"></a>37. 守护线程是什么？</h3><p>守护线程（即daemon thread），是个服务线程，准确地来说就是服务其他的线程。</p><h3 id="38-创建线程有哪几种方式？"><a href="#38-创建线程有哪几种方式？" class="headerlink" title="38. 创建线程有哪几种方式？"></a>38. 创建线程有哪几种方式？</h3><p>①. 继承Thread类创建线程类</p><ul><li>定义Thread类的子类，并重写该类的run方法，该run方法的方法体就代表了线程要完成的任务。因此把run()方法称为执行体。</li><li>创建Thread子类的实例，即创建了线程对象。</li><li>调用线程对象的start()方法来启动该线程。</li></ul><p>②. 通过Runnable接口创建线程类</p><ul><li>定义runnable接口的实现类，并重写该接口的run()方法，该run()方法的方法体同样是该线程的线程执行体。</li><li>创建 Runnable实现类的实例，并依此实例作为Thread的target来创建Thread对象，该Thread对象才是真正的线程对象。</li><li>调用线程对象的start()方法来启动该线程。</li></ul><p>③. 通过Callable和Future创建线程</p><ul><li>创建Callable接口的实现类，并实现call()方法，该call()方法将作为线程执行体，并且有返回值。</li><li>创建Callable实现类的实例，使用FutureTask类来包装Callable对象，该FutureTask对象封装了该Callable对象的call()方法的返回值。</li><li>使用FutureTask对象作为Thread对象的target创建并启动新线程。</li><li>调用FutureTask对象的get()方法来获得子线程执行结束后的返回值。</li></ul><h3 id="39-说一下-runnable-和-callable-有什么区别？"><a href="#39-说一下-runnable-和-callable-有什么区别？" class="headerlink" title="39. 说一下 runnable 和 callable 有什么区别？"></a>39. 说一下 runnable 和 callable 有什么区别？</h3><p>有点深的问题了，可以看出一个Java程序员学习知识的广度。</p><ul><li>Runnable接口中的run()方法的返回值是void，它做的事情只是纯粹地去执行run()方法中的代码而已；</li><li>Callable接口中的call()方法是有返回值的，是一个泛型，和Future、FutureTask配合可以用来获取异步执行的结果。</li></ul><h3 id="40-线程有哪些状态？"><a href="#40-线程有哪些状态？" class="headerlink" title="40. 线程有哪些状态？"></a>40. 线程有哪些状态？</h3><p>线程通常都有五种状态，创建、就绪、运行、阻塞和死亡。</p><ul><li>创建状态。在生成线程对象，并没有调用该对象的start方法，这是线程处于创建状态。</li><li>就绪状态。当调用了线程对象的start方法之后，该线程就进入了就绪状态，但是此时线程调度程序还没有把该线程设置为当前线程，此时处于就绪状态。在线程运行之后，从等待或者睡眠中回来之后，也会处于就绪状态。</li><li>运行状态。线程调度程序将处于就绪状态的线程设置为当前线程，此时线程就进入了运行状态，开始运行run函数当中的代码。</li><li>阻塞状态。线程正在运行的时候，被暂停，通常是为了等待某个时间的发生(比如说某项资源就绪)之后再继续运行。sleep,suspend，wait等方法都可以导致线程阻塞。</li><li>死亡状态。如果一个线程的run方法执行结束或者调用stop方法后，该线程就会死亡。对于已经死亡的线程，无法再使用start方法令其进入就绪 。</li></ul><h3 id="41-sleep-和-wait-有什么区别？"><a href="#41-sleep-和-wait-有什么区别？" class="headerlink" title="41. sleep() 和 wait() 有什么区别？"></a>41. sleep() 和 wait() 有什么区别？</h3><p>sleep()：方法是线程类（Thread）的静态方法，让调用线程进入睡眠状态，让出执行机会给其他线程，等到休眠时间结束后，线程进入就绪状态和其他线程一起竞争cpu的执行时间。因为sleep() 是static静态的方法，他不能改变对象的机锁，当一个synchronized块中调用了sleep() 方法，线程虽然进入休眠，但是对象的机锁没有被释放，其他线程依然无法访问这个对象。</p><p>wait()：wait()是Object类的方法，当一个线程执行到wait方法时，它就进入到一个和该对象相关的等待池，同时释放对象的机锁，使得其他线程能够访问，可以通过notify，notifyAll方法来唤醒等待的线程。</p><h3 id="42-notify-和-notifyAll-有什么区别？"><a href="#42-notify-和-notifyAll-有什么区别？" class="headerlink" title="42. notify()和 notifyAll()有什么区别？"></a>42. notify()和 notifyAll()有什么区别？</h3><ul><li>如果线程调用了对象的 wait()方法，那么线程便会处于该对象的等待池中，等待池中的线程不会去竞争该对象的锁。</li><li>当有线程调用了对象的 notifyAll()方法（唤醒所有 wait 线程）或 notify()方法（只随机唤醒一个 wait 线程），被唤醒的的线程便会进入该对象的锁池中，锁池中的线程会去竞争该对象锁。也就是说，调用了notify后只要一个线程会由等待池进入锁池，而notifyAll会将该对象等待池内的所有线程移动到锁池中，等待锁竞争。</li><li>优先级高的线程竞争到对象锁的概率大，假若某线程没有竞争到该对象锁，它还会留在锁池中，唯有线程再次调用 wait()方法，它才会重新回到等待池中。而竞争到对象锁的线程则继续往下执行，直到执行完了 synchronized 代码块，它会释放掉该对象锁，这时锁池中的线程会继续竞争该对象锁。</li></ul><h3 id="43-线程的-run-和-start-有什么区别？"><a href="#43-线程的-run-和-start-有什么区别？" class="headerlink" title="43. 线程的 run()和 start()有什么区别？"></a>43. 线程的 run()和 start()有什么区别？</h3><p>每个线程都是通过某个特定Thread对象所对应的方法run()来完成其操作的，方法run()称为线程体。通过调用Thread类的start()方法来启动一个线程。</p><p>start()方法来启动一个线程，真正实现了多线程运行。这时无需等待run方法体代码执行完毕，可以直接继续执行下面的代码； 这时此线程是处于就绪状态， 并没有运行。 然后通过此Thread类调用方法run()来完成其运行状态， 这里方法run()称为线程体，它包含了要执行的这个线程的内容， Run方法运行结束， 此线程终止。然后CPU再调度其它线程。</p><p>run()方法是在本线程里的，只是线程里的一个函数,而不是多线程的。 如果直接调用run(),其实就相当于是调用了一个普通函数而已，直接待用run()方法必须等待run()方法执行完毕才能执行下面的代码，所以执行路径还是只有一条，根本就没有线程的特征，所以在多线程执行时要使用start()方法而不是run()方法。</p><h3 id="44-创建线程池有哪几种方式？"><a href="#44-创建线程池有哪几种方式？" class="headerlink" title="44. 创建线程池有哪几种方式？"></a>44. 创建线程池有哪几种方式？</h3><p>①. newFixedThreadPool(int nThreads)<br>创建一个固定长度的线程池，每当提交一个任务就创建一个线程，直到达到线程池的最大数量，这时线程规模将不再变化，当线程发生未预期的错误而结束时，线程池会补充一个新的线程。</p><p>②. newCachedThreadPool()<br>创建一个可缓存的线程池，如果线程池的规模超过了处理需求，将自动回收空闲线程，而当需求增加时，则可以自动添加新线程，线程池的规模不存在任何限制。</p><p>③. newSingleThreadExecutor()<br>这是一个单线程的Executor，它创建单个工作线程来执行任务，如果这个线程异常结束，会创建一个新的来替代它；它的特点是能确保依照任务在队列中的顺序来串行执行。</p><p>④. newScheduledThreadPool(int corePoolSize)<br>创建了一个固定长度的线程池，而且以延迟或定时的方式来执行任务，类似于Timer。</p><h3 id="45-线程池都有哪些状态？"><a href="#45-线程池都有哪些状态？" class="headerlink" title="45. 线程池都有哪些状态？"></a>45. 线程池都有哪些状态？</h3><p>线程池有5种状态：Running、ShutDown、Stop、Tidying、Terminated。可以画个图来解释。</p><h3 id="46-线程池中-submit-和-execute-方法有什么区别？"><a href="#46-线程池中-submit-和-execute-方法有什么区别？" class="headerlink" title="46. 线程池中 submit()和 execute()方法有什么区别？"></a>46. 线程池中 submit()和 execute()方法有什么区别？</h3><ul><li>接收的参数不一样</li><li>submit有返回值，而execute没有</li><li>submit方便Exception处理</li></ul><h3 id="47-在-java-程序中怎么保证多线程的运行安全？"><a href="#47-在-java-程序中怎么保证多线程的运行安全？" class="headerlink" title="47. 在 java 程序中怎么保证多线程的运行安全？"></a>47. 在 java 程序中怎么保证多线程的运行安全？</h3><p>线程安全在三个方面体现：<br>原子性：提供互斥访问，同一时刻只能有一个线程对数据进行操作，（atomic,synchronized）；<br>可见性：一个线程对主内存的修改可以及时地被其他线程看到，（synchronized,volatile）；<br>有序性：一个线程观察其他线程中的指令执行顺序，由于指令重排序，该观察结果一般杂乱无序，（happens-before原则）。</p><h3 id="48-多线程锁的升级原理是什么？"><a href="#48-多线程锁的升级原理是什么？" class="headerlink" title="48. 多线程锁的升级原理是什么？"></a>48. 多线程锁的升级原理是什么？</h3><p>在Java中，锁共有4种状态，级别从低到高依次为：无状态锁，偏向锁，轻量级锁和重量级锁状态，这几个状态会随着竞争情况逐渐升级。锁可以升级但不能降级。<br>锁升级过程图:<br><img src="https://s2.ax1x.com/2019/10/14/uz4aGD.jpg" srcset="/blog/img/loading.gif" alt="Java Lock Upgrade"></p><h3 id="49-什么是死锁？"><a href="#49-什么是死锁？" class="headerlink" title="49. 什么是死锁？"></a>49. 什么是死锁？</h3><p>死锁是指两个或两个以上的进程在执行过程中，由于竞争资源或者由于彼此通信而造成的一种阻塞的现象，若无外力作用，它们都将无法推进下去。此时称系统处于死锁状态或系统产生了死锁，这些永远在互相等待的进程称为死锁进程。是操作系统层面的一个错误，是进程死锁的简称，最早在 1965 年由 Dijkstra 在研究银行家算法时提出的，它是计算机操作系统乃至整个并发程序设计领域最难处理的问题之一。</p><h3 id="50-怎么防止死锁？"><a href="#50-怎么防止死锁？" class="headerlink" title="50. 怎么防止死锁？"></a>50. 怎么防止死锁？</h3><p>死锁的四个必要条件：</p><ul><li>互斥条件：进程对所分配到的资源不允许其他进程进行访问，若其他进程访问该资源，只能等待，直至占有该资源的进程使用完成后释放该资源</li><li>请求和保持条件：进程获得一定的资源之后，又对其他资源发出请求，但是该资源可能被其他进程占有，此事请求阻塞，但又对自己获得的资源保持不放</li><li>不可剥夺条件：是指进程已获得的资源，在未完成使用之前，不可被剥夺，只能在使用完后自己释放</li><li>环路等待条件：是指进程发生死锁后，若干进程之间形成一种头尾相接的循环等待资源关系</li></ul><p>这四个条件是死锁的必要条件，只要系统发生死锁，这些条件必然成立，而只要上述条件之 一不满足，就不会发生死锁。</p><p>理解了死锁的原因，尤其是产生死锁的四个必要条件，就可以最大可能地避免、预防和 解除死锁。</p><p>所以，在系统设计、进程调度等方面注意如何不让这四个必要条件成立，如何确 定资源的合理分配算法，避免进程永久占据系统资源。</p><p>此外，也要防止进程在处于等待状态的情况下占用资源。因此，对资源的分配要给予合理的规划。</p><h3 id="51-ThreadLocal-是什么？有哪些使用场景？"><a href="#51-ThreadLocal-是什么？有哪些使用场景？" class="headerlink" title="51. ThreadLocal 是什么？有哪些使用场景？"></a>51. ThreadLocal 是什么？有哪些使用场景？</h3><p>线程局部变量是局限于线程内部的变量，属于线程自身所有，不在多个线程间共享。Java提供ThreadLocal类来支持线程局部变量，是一种实现线程安全的方式。但是在管理环境下（如 web 服务器）使用线程局部变量的时候要特别小心，在这种情况下，工作线程的生命周期比任何应用变量的生命周期都要长。任何线程局部变量一旦在工作完成后没有释放，Java 应用就存在内存泄露的风险。</p><h3 id="52-说一下-synchronized-底层实现原理？"><a href="#52-说一下-synchronized-底层实现原理？" class="headerlink" title="52.说一下 synchronized 底层实现原理？"></a>52.说一下 synchronized 底层实现原理？</h3><p>synchronized可以保证方法或者代码块在运行时，同一时刻只有一个方法可以进入到临界区，同时它还可以保证共享变量的内存可见性。</p><p>Java中每一个对象都可以作为锁，这是synchronized实现同步的基础：</p><ul><li>普通同步方法，锁是当前实例对象</li><li>静态同步方法，锁是当前类的class对象</li><li>同步方法块，锁是括号里面的对象</li></ul><h3 id="53-synchronized-和-volatile-的区别是什么？"><a href="#53-synchronized-和-volatile-的区别是什么？" class="headerlink" title="53. synchronized 和 volatile 的区别是什么？"></a>53. synchronized 和 volatile 的区别是什么？</h3><ul><li>volatile本质是在告诉jvm当前变量在寄存器（工作内存）中的值是不确定的，需要从主存中读取； synchronized则是锁定当前变量，只有当前线程可以访问该变量，其他线程被阻塞住。</li><li>volatile仅能使用在变量级别；synchronized则可以使用在变量、方法、和类级别的。</li><li>volatile仅能实现变量的修改可见性，不能保证原子性；而synchronized则可以保证变量的修改可见性和原子性。</li><li>volatile不会造成线程的阻塞；synchronized可能会造成线程的阻塞。</li><li>volatile标记的变量不会被编译器优化；synchronized标记的变量可以被编译器优化。</li></ul><h3 id="54-synchronized-和-Lock-有什么区别？"><a href="#54-synchronized-和-Lock-有什么区别？" class="headerlink" title="54. synchronized 和 Lock 有什么区别？"></a>54. synchronized 和 Lock 有什么区别？</h3><ul><li>首先synchronized是java内置关键字，在jvm层面，Lock是个java类；</li><li>synchronized无法判断是否获取锁的状态，Lock可以判断是否获取到锁；</li><li>synchronized会自动释放锁(a 线程执行完同步代码会释放锁 ；b 线程执行过程中发生异常会释放锁)，Lock需在finally中手工释放锁（unlock()方法释放锁），否则容易造成线程死锁；</li><li>用synchronized关键字的两个线程1和线程2，如果当前线程1获得锁，线程2线程等待。如果线程1阻塞，线程2则会一直等待下去，而Lock锁就不一定会等待下去，如果尝试获取不到锁，线程可以不用一直等待就结束了；</li><li>synchronized的锁可重入、不可中断、非公平，而Lock锁可重入、可判断、可公平（两者皆可）；</li><li>Lock锁适合大量同步的代码的同步问题，synchronized锁适合代码少量的同步问题。</li></ul><h3 id="55-synchronized-和-ReentrantLock-区别是什么？"><a href="#55-synchronized-和-ReentrantLock-区别是什么？" class="headerlink" title="55. synchronized 和 ReentrantLock 区别是什么？"></a>55. synchronized 和 ReentrantLock 区别是什么？</h3><p>synchronized是和if、else、for、while一样的关键字，ReentrantLock是类，这是二者的本质区别。既然ReentrantLock是类，那么它就提供了比synchronized更多更灵活的特性，可以被继承、可以有方法、可以有各种各样的类变量，ReentrantLock比synchronized的扩展性体现在几点上： </p><ul><li>ReentrantLock可以对获取锁的等待时间进行设置，这样就避免了死锁 </li><li>ReentrantLock可以获取各种锁的信息</li><li>ReentrantLock可以灵活地实现多路通知 </li></ul><p>另外，二者的锁机制其实也是不一样的:ReentrantLock底层调用的是Unsafe的park方法加锁，synchronized操作的应该是对象头中mark word。</p><h3 id="56-说一下-atomic-的原理？"><a href="#56-说一下-atomic-的原理？" class="headerlink" title="56. 说一下 atomic 的原理？"></a>56. 说一下 atomic 的原理？</h3><p>Atomic包中的类基本的特性就是在多线程环境下，当有多个线程同时对单个（包括基本类型及引用类型）变量进行操作时，具有排他性，即当多个线程同时对该变量的值进行更新时，仅有一个线程能成功，而未成功的线程可以向自旋锁一样，继续尝试，一直等到执行成功。</p><p>Atomic系列的类中的核心方法都会调用unsafe类中的几个本地方法。我们需要先知道一个东西就是Unsafe类，全名为：sun.misc.Unsafe，这个类包含了大量的对C代码的操作，包括很多直接内存分配以及原子操作的调用，而它之所以标记为非安全的，是告诉你这个里面大量的方法调用都会存在安全隐患，需要小心使用，否则会导致严重的后果，例如在通过unsafe分配内存的时候，如果自己指定某些区域可能会导致一些类似C++一样的指针越界到其他进程的问题。</p>]]></content>
    
    
    <categories>
      
      <category>Java面试题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java知识体系-JVM内存区域</title>
    <link href="undefined2019/10/09/java-core01-jvm01/"/>
    <url>2019/10/09/java-core01-jvm01/</url>
    
    <content type="html"><![CDATA[<p>简单介绍一下JVM内存的各个区域</p><a id="more"></a><h2 id="JVM内存区域"><a href="#JVM内存区域" class="headerlink" title="JVM内存区域"></a>JVM内存区域</h2><p>JVM 内存区域主要分为线程私有区域【程序计数器、虚拟机栈、本地方法区】、线程共享区 域【JAVA 堆、方法区】、直接内存（不受JVM GC管理）。</p><h3 id="线程私有数据区域"><a href="#线程私有数据区域" class="headerlink" title="线程私有数据区域"></a>线程私有数据区域</h3><p>线程私有数据区域生命周期与线程相同, 依赖用户线程的 启动/结束 而 创建/销毁(在 Hotspot VM 内, 每个线程都与操作系统的本地线程直接映射, 因此这部分内存区域的存/否跟随本地线程的 生/死对应)。</p><h3 id="线程共享数据区域"><a href="#线程共享数据区域" class="headerlink" title="线程共享数据区域"></a>线程共享数据区域</h3><p>线程共享区域随虚拟机的启动/关闭而创建/销毁。</p><h3 id="直接内存"><a href="#直接内存" class="headerlink" title="直接内存"></a>直接内存</h3><p>直接内存并不是 JVM 运行时数据区的一部分, 但也会被频繁的使用: 在 JDK 1.4 引入的 NIO 提 供了基于 Channel 与 Buffer 的 IO 方式, 它可以使用 Native 函数库直接分配堆外内存, 然后使用 DirectByteBuffer 对象作为这块内存的引用进行操作(详见: Java I/O 扩展), 这样就避免了在 Java 堆和 Native 堆中来回复制数据, 因此在一些场景中可以显著提高性能。</p><p><img src="https://s2.ax1x.com/2019/10/10/uororT.png" srcset="/blog/img/loading.gif" alt="JVM"></p><h3 id="程序计数器-线程私有"><a href="#程序计数器-线程私有" class="headerlink" title="程序计数器(线程私有)"></a>程序计数器(线程私有)</h3><p>一块较小的内存空间, 是当前线程所执行的字节码的行号指示器，每条线程都要有一个独立的<br>程序计数器，这类内存也称为“线程私有”的内存。</p><p>正在执行 java 方法的话，计数器记录的是虚拟机字节码指令的地址(当前指令的地址)。如 果还是 Native 方法，则为空。</p><p>这个内存区域是唯一一个在虚拟机中没有规定任何 OutOfMemoryError 情况的区域。</p><h3 id="虚拟机栈-线程私有"><a href="#虚拟机栈-线程私有" class="headerlink" title="虚拟机栈(线程私有)"></a>虚拟机栈(线程私有)</h3><p>是描述 java 方法执行的内存模型，每个方法在执行的同时都会创建一个栈帧(Stack Frame) 用于存储局部变量表、操作数栈、动态链接、方法出口等信息。每一个方法从调用直至执行完成 的过程，就对应着一个栈帧在虚拟机栈中入栈到出栈的过程。</p><p>栈帧(Stack Frame)是用来存储数据和部分过程结果的数据结构，同时也被用来处理动态链接 (Dynamic Linking)、 方法返回值和异常分派( Dispatch Exception)。栈帧随着方法调用而创建，随着方法结束而销毁——无论方法是正常完成还是异常完成(抛出了在方法内未被捕获的异 常)都算作方法结束。</p><p><img src="https://s2.ax1x.com/2019/10/10/uoyg9s.jpg" srcset="/blog/img/loading.gif" alt="Stack Frame"></p><h3 id="本地方法区-线程私有"><a href="#本地方法区-线程私有" class="headerlink" title="本地方法区(线程私有)"></a>本地方法区(线程私有)</h3><p>本地方法区和 Java Stack 作用类似, 区别是虚拟机栈为执行 Java 方法服务, 而本地方法栈则为 Native 方法服务, 如果一个 VM 实现使用 C-linkage 模型来支持 Native 调用, 那么该栈将会是一个 C 栈，但 HotSpot VM 直接就把本地方法栈和虚拟机栈合二为一。</p><h3 id="堆-Heap-线程共享"><a href="#堆-Heap-线程共享" class="headerlink" title="堆(Heap-线程共享)"></a>堆(Heap-线程共享)</h3><p>是被线程共享的一块内存区域，创建的对象和数组都保存在 Java 堆内存中，也是垃圾收集器进行 垃圾收集的最重要的内存区域。由于现代 VM 采用分代收集算法, 因此 Java 堆从 GC 的角度还可以 细分为: 新生代(Eden 区、From Survivor 区和 To Survivor 区)和老年代。</p><h3 id="方法区-永久代-线程共享"><a href="#方法区-永久代-线程共享" class="headerlink" title="方法区/永久代(线程共享)"></a>方法区/永久代(线程共享)</h3><p>即我们常说的永久代(Permanent Generation), 用于存储被 JVM 加载的类信息、常量、静 态变量、即时编译器编译后的代码等数据. HotSpot VM 把 GC 分代收集扩展至方法区, 即使用 Java 堆的永久代来实现方法区, 这样 HotSpot 的垃圾收集器就可以像管理 Java 堆一样管理这部分内存, 而不必为方法区开发专门的内存管理器(永久带的内存回收的主要目标是针对常量池的回收和类型 的卸载, 因此收益一般很小)。</p><p> 运行时常量池(Runtime Constant Pool)是方法区的一部分。Class 文件中除了有类的版 本、字段、方法、接口等描述等信息外，还有一项信息是常量池(Constant Pool Table)，用于存放编译期生成的各种字面量和符号引用，这部分内容将在类加 载后存放到方法区的运行时常量池中。 Java 虚拟机对 Class 文件的每一部分(自然也包括常量 池)的格式都有严格的规定，每一个字节用于存储哪种数据都必须符合规范上的要求，这样才会 被虚拟机认可、装载和执行。</p>]]></content>
    
    
    <categories>
      
      <category>Java知识体系</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>JVM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java面试题-集合</title>
    <link href="undefined2019/10/08/java-offer02-collection/"/>
    <url>2019/10/08/java-offer02-collection/</url>
    
    <content type="html"><![CDATA[<p>第二部分，Java容器相关题目，共16粒。</p><a id="more"></a><h2 id="Java容器"><a href="#Java容器" class="headerlink" title="Java容器"></a>Java容器</h2><h3 id="18-java-容器都有哪些？"><a href="#18-java-容器都有哪些？" class="headerlink" title="18. java 容器都有哪些？"></a>18. java 容器都有哪些？</h3><p>Collection:<br>  List: ArrayList LinkedList Stack<br>  Set: HashSet TreeSet<br>Map:<br>  HashMap<br>  LinkedHashMap<br>  TreeMap</p><h3 id="19-Collection-和-Collections-有什么区别？"><a href="#19-Collection-和-Collections-有什么区别？" class="headerlink" title="19. Collection 和 Collections 有什么区别？"></a>19. Collection 和 Collections 有什么区别？</h3><ul><li><p>java.util.Collection 是一个集合接口（集合类的一个顶级接口）。它提供了对集合对象进行基本操作的通用接口方法。Collection接口在Java 类库中有很多具体的实现。Collection接口的意义是为各种具体的集合提供了最大化的统一操作方式，其直接继承接口有List与Set。</p></li><li><p>Collections则是集合类的一个工具类/帮助类，其中提供了一系列静态方法，用于对集合中元素进行排序、搜索以及线程安全等各种操作。</p></li></ul><h3 id="20-List、Set、Map-之间的区别是什么？"><a href="#20-List、Set、Map-之间的区别是什么？" class="headerlink" title="20. List、Set、Map 之间的区别是什么？"></a>20. List、Set、Map 之间的区别是什么？</h3><table><thead><tr><th></th><th>List</th><th>Set</th><th>Map</th></tr></thead><tbody><tr><td>继承接口</td><td>Collection</td><td>Collection</td><td></td></tr><tr><td>常见实现类</td><td>AbstractList(常见子类如: ArrayList, LinkedList, Vector)</td><td>AbstractSet(常见子类如: HashSet, LinkedHashSet, TreeSet)</td><td>HashMap, HashTable</td></tr><tr><td>常见方法</td><td>add(), remove(), clear(), get(), contains(), size()</td><td>add(), remove(), clear(), contains(), size()</td><td>put(), get(), remove(), clear(), containsKey(), containsValue(), keySet(), values(), size()</td></tr><tr><td>元素</td><td>可重复</td><td>不可重复(用equals判断)</td><td>key不可重复，value可重复</td></tr><tr><td>顺序</td><td>有序</td><td>无序</td><td></td></tr><tr><td>线程安全</td><td>Vector线程安全</td><td></td><td>HashTable线程安全, ConcurrentHashMap线程安全</td></tr></tbody></table><h3 id="21-HashMap-和-HashTable-有什么区别？"><a href="#21-HashMap-和-HashTable-有什么区别？" class="headerlink" title="21. HashMap 和 HashTable 有什么区别？"></a>21. HashMap 和 HashTable 有什么区别？</h3><ul><li><p>HashMap去掉了HashTable 的contains方法，但是加上了containsValue（）和containsKey（）方法。</p></li><li><p>HashTable同步的，而HashMap是非同步的，效率上比HashTable要高。</p></li><li><p>HashMap允许空键值，而HashTable不允许。</p></li></ul><h3 id="22-如何决定使用-HashMap-还是-TreeMap？"><a href="#22-如何决定使用-HashMap-还是-TreeMap？" class="headerlink" title="22. 如何决定使用 HashMap 还是 TreeMap？"></a>22. 如何决定使用 HashMap 还是 TreeMap？</h3><p>对于在Map中插入、删除和定位元素这类操作，HashMap是最好的选择。然而，假如你需要对一个有序的key集合进行遍历，TreeMap是更好的选择。基于你的collection的大小，也许向HashMap中添加元素会更快，将map换为TreeMap进行有序key的遍历。</p><h3 id="23-说一下-HashMap-的实现原理？"><a href="#23-说一下-HashMap-的实现原理？" class="headerlink" title="23. 说一下 HashMap 的实现原理？"></a>23. 说一下 HashMap 的实现原理？</h3><p>HashMap概述： HashMap是基于哈希表的Map接口的非同步实现。此实现提供所有可选的映射操作，并允许使用null值和null键。此类不保证映射的顺序，特别是它不保证该顺序恒久不变。 </p><p>HashMap的数据结构： 在java编程语言中，最基本的结构就是两种，一个是数组，另外一个是模拟指针（引用），所有的数据结构都可以用这两个基本结构来构造的，HashMap也不例外。HashMap实际上是一个“链表散列”的数据结构，即数组和链表的结合体。</p><p>当我们往Hashmap中put元素时,首先根据key的hashcode重新计算hash值,根绝hash值得到这个元素在数组中的位置(下标),如果该数组在该位置上已经存放了其他元素,那么在这个位置上的元素将以链表的形式存放,新加入的放在链头,最先加入的放入链尾.如果数组中该位置没有元素,就直接将该元素放到数组的该位置上。</p><p>需要注意Jdk 1.8中对HashMap的实现做了优化,当链表中的节点数据超过八个之后,该链表会转为红黑树来提高查询效率,从原来的O(n)到O(logn)。</p><h3 id="24-说一下-HashSet-的实现原理？"><a href="#24-说一下-HashSet-的实现原理？" class="headerlink" title="24. 说一下 HashSet 的实现原理？"></a>24. 说一下 HashSet 的实现原理？</h3><ul><li><p>HashSet底层由HashMap实现</p></li><li><p>HashSet的值存放于HashMap的key上，所以HashSet是不可重复的</p></li><li><p>HashMap的value统一为PRESENT</p></li></ul><h3 id="25-ArrayList-和-LinkedList-的区别是什么？"><a href="#25-ArrayList-和-LinkedList-的区别是什么？" class="headerlink" title="25. ArrayList 和 LinkedList 的区别是什么？"></a>25. ArrayList 和 LinkedList 的区别是什么？</h3><p>最明显的区别是 ArrrayList底层的数据结构是数组，支持随机访问，而 LinkedList 的底层数据结构是双向循环链表，不支持随机访问。使用下标访问一个元素，ArrayList 的时间复杂度是 O(1)，而 LinkedList 是 O(n)。</p><h3 id="26-如何实现数组和-List-之间的转换？"><a href="#26-如何实现数组和-List-之间的转换？" class="headerlink" title="26. 如何实现数组和 List 之间的转换？"></a>26. 如何实现数组和 List 之间的转换？</h3><ul><li><p>List转换成为数组：调用ArrayList的toArray方法。</p></li><li><p>数组转换成为List：调用Arrays的asList方法。</p></li></ul><h3 id="27-ArrayList-和-Vector-的区别是什么？"><a href="#27-ArrayList-和-Vector-的区别是什么？" class="headerlink" title="27. ArrayList 和 Vector 的区别是什么？"></a>27. ArrayList 和 Vector 的区别是什么？</h3><ul><li><p>Vector是同步的，而ArrayList不是。然而，如果你寻求在迭代的时候对列表进行改变，你应该使用CopyOnWriteArrayList。 </p></li><li><p>ArrayList比Vector快，它因为有同步，不会过载。 </p></li><li><p>ArrayList更加通用，因为我们可以使用Collections工具类轻易地获取同步列表和只读列表。</p></li></ul><h3 id="28-Array-和-ArrayList-有何区别？"><a href="#28-Array-和-ArrayList-有何区别？" class="headerlink" title="28. Array 和 ArrayList 有何区别？"></a>28. Array 和 ArrayList 有何区别？</h3><ul><li><p>Array可以容纳基本类型和对象，而ArrayList只能容纳对象。 </p></li><li><p>Array是指定大小的，而ArrayList大小是不固定的。 </p></li><li><p>Array没有提供ArrayList那么多功能，比如addAll、removeAll和iterator等。</p></li></ul><h3 id="29-在-Queue-中-poll-和-remove-有什么区别？"><a href="#29-在-Queue-中-poll-和-remove-有什么区别？" class="headerlink" title="29. 在 Queue 中 poll()和 remove()有什么区别？"></a>29. 在 Queue 中 poll()和 remove()有什么区别？</h3><p>poll() 和 remove() 都是从队列中取出一个元素，但是 poll() 在获取元素失败的时候会返回空，但是 remove() 失败的时候会抛出异常。</p><h3 id="30-哪些集合类是线程安全的？"><a href="#30-哪些集合类是线程安全的？" class="headerlink" title="30. 哪些集合类是线程安全的？"></a>30. 哪些集合类是线程安全的？</h3><ul><li><p>Vector：就比ArrayList多了个同步化机制（线程安全），因为效率较低，现在已经不太建议使用。在web应用中，特别是前台页面，往往效率（页面响应速度）是优先考虑的。</p></li><li><p>Stack：堆栈类，先进后出。</p></li><li><p>HashTable：就比 HashMap 多了个线程安全。</p></li><li><p>enumeration：枚举，相当于迭代器。</p></li></ul><h3 id="31-迭代器-Iterator-是什么？"><a href="#31-迭代器-Iterator-是什么？" class="headerlink" title="31. 迭代器 Iterator 是什么？"></a>31. 迭代器 Iterator 是什么？</h3><p>迭代器是一种设计模式，它是一个对象，它可以遍历并选择序列中的对象，而开发人员不需要了解该序列的底层结构。迭代器通常被称为“轻量级”对象，因为创建它的代价小。</p><h3 id="32-Iterator-怎么使用？有什么特点？"><a href="#32-Iterator-怎么使用？有什么特点？" class="headerlink" title="32. Iterator 怎么使用？有什么特点？"></a>32. Iterator 怎么使用？有什么特点？</h3><p>Java中的Iterator功能比较简单，并且只能单向移动：<br>(1) 使用方法iterator()要求容器返回一个Iterator。第一次调用Iterator的next()方法时，它返回序列的第一个元素。注意：iterator()方法是java.lang.Iterable接口,被Collection继承。</p><p>(2) 使用next()获得序列中的下一个元素。<br>　<br>(3) 使用hasNext()检查序列中是否还有元素。</p><p>(4) 使用remove()将迭代器新返回的元素删除。</p><p>Iterator是Java迭代器最简单的实现，为List设计的ListIterator具有更多的功能，它可以从两个方向遍历List，也可以从List中插入和删除元素。</p><h3 id="33-Iterator-和-ListIterator-有什么区别？"><a href="#33-Iterator-和-ListIterator-有什么区别？" class="headerlink" title="33. Iterator 和 ListIterator 有什么区别？"></a>33. Iterator 和 ListIterator 有什么区别？</h3><ul><li><p>Iterator可用来遍历Set和List集合，但是ListIterator只能用来遍历List。 </p></li><li><p>Iterator对集合只能是前向遍历，ListIterator既可以前向也可以后向。 </p></li><li><p>ListIterator实现了Iterator接口，并包含其他的功能，比如：增加元素，替换元素，获取前一个和后一个元素的索引，等等。</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>Java面试题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java面试题-基础</title>
    <link href="undefined2019/09/30/java-offer01-basic/"/>
    <url>2019/09/30/java-offer01-basic/</url>
    
    <content type="html"><![CDATA[<p>第一部分，Java基础题目，共17粒。附带常量池和堆内存简介。</p><a id="more"></a><h2 id="Java基础"><a href="#Java基础" class="headerlink" title="Java基础"></a>Java基础</h2><h3 id="1-JDK和JRE有什么区别？"><a href="#1-JDK和JRE有什么区别？" class="headerlink" title="1.JDK和JRE有什么区别？"></a>1.JDK和JRE有什么区别？</h3><ul><li>JDK：Java Development Kit 的简称，java 开发工具包，提供了 java 的开发环境和运行环境。</li><li>JRE：Java Runtime Environment 的简称，java 运行环境，为 java 的运行提供了所需环境。</li></ul><p>具体来说 JDK 其实包含了 JRE，同时还包含了编译 java 源码的编译器 javac，还包含了很多 java 程序调试和分析的工具。简单来说：如果你需要运行 java 程序，只需安装 JRE 就可以了，如果你需要编写 java 程序，需要安装 JDK。</p><h3 id="2-和-equals-的区别是什么？"><a href="#2-和-equals-的区别是什么？" class="headerlink" title="2.== 和 equals 的区别是什么？"></a>2.== 和 equals 的区别是什么？</h3><p>==：<br>对于基本类型和引用类型 == 的作用效果是不同的。</p><ul><li>基本类型：比较的是值是否相同；</li><li>引用类型：比较的是引用是否相同；</li></ul><p>equals：<br>equals 本质上就是 ==，只不过 String 和 Integer 等重写了 equals 方法，把它变成了值比较。</p><h3 id="3-两个对象的-hashCode-相同，则-equals-也一定为-true，对吗？"><a href="#3-两个对象的-hashCode-相同，则-equals-也一定为-true，对吗？" class="headerlink" title="3.两个对象的 hashCode()相同，则 equals()也一定为 true，对吗？"></a>3.两个对象的 hashCode()相同，则 equals()也一定为 true，对吗？</h3><p>不对，两个对象的 hashCode()相同，equals()不一定 true。例如在散列表中，hashCode()相等即两个键值对的哈希值相等，然而哈希值相等，并不一定能得出键值对相等。</p><h3 id="4-final-在-java-中有什么作用？"><a href="#4-final-在-java-中有什么作用？" class="headerlink" title="4.final 在 java 中有什么作用？"></a>4.final 在 java 中有什么作用？</h3><ul><li>final 修饰的类叫最终类，该类不能被继承。</li><li>final 修饰的方法不能被重写。</li><li>final 修饰的变量叫常量，常量必须初始化，初始化之后值就不能被修改。</li></ul><h3 id="5-java-中的-Math-round-1-5-等于多少？"><a href="#5-java-中的-Math-round-1-5-等于多少？" class="headerlink" title="5.java 中的 Math.round(-1.5) 等于多少？"></a>5.java 中的 Math.round(-1.5) 等于多少？</h3><p>等于 -1，因为在数轴上取值时，中间值（0.5）向右取整，所以正 0.5 是往上取整，负 0.5 是直接舍弃。</p><h3 id="6-String-属于基础的数据类型吗？"><a href="#6-String-属于基础的数据类型吗？" class="headerlink" title="6.String 属于基础的数据类型吗？"></a>6.String 属于基础的数据类型吗？</h3><p>String 不属于基础类型，基础类型有 8 种：byte、boolean、char、short、int、float、long、double，而 String 属于对象。</p><h3 id="7-java-中操作字符串都有哪些类？它们之间有什么区别？"><a href="#7-java-中操作字符串都有哪些类？它们之间有什么区别？" class="headerlink" title="7.java 中操作字符串都有哪些类？它们之间有什么区别？"></a>7.java 中操作字符串都有哪些类？它们之间有什么区别？</h3><p>操作字符串的类有：String、StringBuffer、StringBuilder。</p><p>String 和 StringBuffer、StringBuilder 的区别在于 String 声明的是不可变的对象，每次操作都会生成新的 String 对象，然后将指针指向新的 String 对象，而 StringBuffer、StringBuilder 可以在原有对象的基础上进行操作，所以在经常改变字符串内容的情况下最好不要使用 String。</p><p>StringBuffer 和 StringBuilder 最大的区别在于，StringBuffer 是线程安全的，而 StringBuilder 是非线程安全的，但 StringBuilder 的性能却高于 StringBuffer，所以在单线程环境下推荐使用 StringBuilder，多线程环境下推荐使用 StringBuffer。</p><h3 id="8-String-str-”i”与-String-str-new-String-“i”-一样吗？"><a href="#8-String-str-”i”与-String-str-new-String-“i”-一样吗？" class="headerlink" title="8.String str=”i”与 String str=new String(“i”)一样吗？"></a>8.String str=”i”与 String str=new String(“i”)一样吗？</h3><p>不一样，因为内存的分配方式不一样。String str=”i”的方式，java 虚拟机会将其分配到常量池中；而 String str=new String(“i”) 则会被分到堆内存中。</p><h3 id="9-如何将字符串反转？"><a href="#9-如何将字符串反转？" class="headerlink" title="9.如何将字符串反转？"></a>9.如何将字符串反转？</h3><p>使用 StringBuilder 或者 stringBuffer 的 reverse() 方法。</p><pre><code class="java">// StringBuffer reverseStringBuffer stringBuffer = new StringBuffer();stringBuffer.append(&quot;abcdefg&quot;);System.out.println(stringBuffer.reverse()); // gfedcba// StringBuilder reverseStringBuilder stringBuilder = new StringBuilder();stringBuilder.append(&quot;abcdefg&quot;);System.out.println(stringBuilder.reverse()); // gfedcba</code></pre><p>也可以自己遍历实现</p><h3 id="10-String-类的常用方法都有那些？"><a href="#10-String-类的常用方法都有那些？" class="headerlink" title="10.String 类的常用方法都有那些？"></a>10.String 类的常用方法都有那些？</h3><ul><li>indexOf()：返回指定字符的索引。</li><li>charAt()：返回指定索引处的字符。</li><li>replace()：字符串替换。</li><li>trim()：去除字符串两端空白。</li><li>split()：分割字符串，返回一个分割后的字符串数组。</li><li>getBytes()：返回字符串的 byte 类型数组。</li><li>length()：返回字符串长度。</li><li>toLowerCase()：将字符串转成小写字母。</li><li>toUpperCase()：将字符串转成大写字符。</li><li>substring()：截取字符串。</li><li>equals()：字符串比较。</li></ul><h3 id="11-抽象类必须要有抽象方法吗？"><a href="#11-抽象类必须要有抽象方法吗？" class="headerlink" title="11.抽象类必须要有抽象方法吗？"></a>11.抽象类必须要有抽象方法吗？</h3><p>不需要，抽象类不一定非要有抽象方法。</p><h3 id="12-普通类和抽象类有哪些区别？"><a href="#12-普通类和抽象类有哪些区别？" class="headerlink" title="12.普通类和抽象类有哪些区别？"></a>12.普通类和抽象类有哪些区别？</h3><ul><li>普通类不能包含抽象方法，抽象类可以包含抽象方法。</li><li>抽象类不能直接实例化，普通类可以直接实例化。</li></ul><h3 id="13-抽象类能使用-final-修饰吗？"><a href="#13-抽象类能使用-final-修饰吗？" class="headerlink" title="13.抽象类能使用 final 修饰吗？"></a>13.抽象类能使用 final 修饰吗？</h3><p>不能，定义抽象类就是让其他类继承的，如果定义为 final 该类就不能被继承，这样彼此就会产生矛盾，所以 final 不能修饰抽象类，如下图所示，编辑器也会提示错误信息。</p><h3 id="14-接口和抽象类有什么区别？"><a href="#14-接口和抽象类有什么区别？" class="headerlink" title="14.接口和抽象类有什么区别？"></a>14.接口和抽象类有什么区别？</h3><ul><li>实现：抽象类的子类使用 extends 来继承；接口必须使用 implements 来实现接口。</li><li>构造函数：抽象类可以有构造函数；接口不能有。</li><li>main 方法：抽象类可以有 main 方法，并且我们能运行它；接口不能有 main 方法。</li><li>实现数量：类可以实现很多个接口；但是只能继承一个抽象类。</li><li>访问修饰符：接口中的方法默认使用 public 修饰；抽象类中的方法可以是任意访问修饰符。</li></ul><h3 id="15-java-中-IO-流分为几种？"><a href="#15-java-中-IO-流分为几种？" class="headerlink" title="15.java 中 IO 流分为几种？"></a>15.java 中 IO 流分为几种？</h3><p>按功能来分：输入流（input）、输出流（output）。</p><p>按类型来分：字节流和字符流。</p><p>字节流和字符流的区别是：字节流按 8 位传输以字节为单位输入输出数据，字符流按 16 位传输以字符为单位输入输出数据。</p><h3 id="16-BIO、NIO、AIO-有什么区别？"><a href="#16-BIO、NIO、AIO-有什么区别？" class="headerlink" title="16.BIO、NIO、AIO 有什么区别？"></a>16.BIO、NIO、AIO 有什么区别？</h3><ul><li>BIO：Block IO 同步阻塞式 IO，就是我们平常使用的传统 IO，它的特点是模式简单使用方便，并发处理能力低。</li><li>NIO：New IO 同步非阻塞 IO，是传统 IO 的升级，客户端和服务器端通过 Channel（通道）通讯，实现了多路复用。</li><li>AIO：Asynchronous IO 是 NIO 的升级，也叫 NIO2，实现了异步非堵塞 IO ，异步 IO 的操作基于事件和回调机制。</li></ul><h3 id="17-Files的常用方法都有哪些？"><a href="#17-Files的常用方法都有哪些？" class="headerlink" title="17.Files的常用方法都有哪些？"></a>17.Files的常用方法都有哪些？</h3><ul><li>Files.exists()：检测文件路径是否存在。</li><li>Files.createFile()：创建文件。</li><li>Files.createDirectory()：创建文件夹。</li><li>Files.delete()：删除一个文件或目录。</li><li>Files.copy()：复制文件。</li><li>Files.move()：移动文件。</li><li>Files.size()：查看文件个数。</li><li>Files.read()：读取文件。</li><li>Files.write()：写入文件。</li></ul><hr><h3 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h3><h4 id="说说对常量池对理解"><a href="#说说对常量池对理解" class="headerlink" title="说说对常量池对理解"></a>说说对常量池对理解</h4><p>常量池有两种，一种是编译阶段生成的在 *.class 文件中的常量池(Constant Pool Table)。另一种是运行时在方法区中的运行时常量池(Runtime Constant Pool)。</p><ul><li><p>在 *.class 文件中，最头的4个字节用于存储魔数(Magic Number)，用于确定一个文件是否能被JVM接受，再接着4个字节用于存储版本号，前2个字节存储次版本号，后2个存储主版本号，再接着是用于存放常量的常量池，由于常量的数量是不固定的，所以常量池的入口放置一个U2类型的数据(constant_pool_count)存储常量池容量计数值。<br>常量池主要用于存放两大类常量：字面量(Literal)和符号引用量(Symbolic References)，字面量相当于Java语言层面常量的概念，如文本字符串，声明为final的常量值等，符号引用则属于编译原理方面的概念，包括了如下三种类型的常量：类和接口的全限定名;字段名称和描述符;方法名称和描述符.</p></li><li><p>运行时常量池是方法区的一部分。*.cLass 文件中除了有类的版本、字段、方法、接口等描述信息外，还有一项信息是常量池，用于存放编译期生成的各种字面量和符号引用，这部分内容将在类加载后进入方法区的运行时常量池中存放。</p></li></ul><p>运行时常量池相对于 *.class 文件中的常量池的另外一个重要特征是具备动态性，Java语言并不要求常量一定只有编译期才能产生，也就是并非预置入 *.class 文件中的常量池的内容才能进入方法区的运行时常量池，运行期间也可能将新的常量放入池中，这种特性被开发人员利用比较多的就是String类的intern()方法。</p><p>常量池的作用：<br>常量池是为了避免频繁的创建和销毁对象而影响系统性能，其实现了对象的共享。<br>例如字符串常量池，在编译阶段就把所有的字符串文字放到一个常量池中。<br>（1）节省内存空间：常量池中所有相同的字符串常量被合并，只占用一个空间。<br>（2）节省运行时间：比较字符串时，==比equals()快。对于两个引用变量，只用==判断引用是否相等，也就可以判断实际值是否相等。</p><h4 id="说说什么是堆内存"><a href="#说说什么是堆内存" class="headerlink" title="说说什么是堆内存"></a>说说什么是堆内存</h4><ul><li>是被线程共享的一块内存区域，创建的对象和数组都保存在 Java 堆内存中，也是垃圾收集器进行 垃圾收集的最重要的内存区域。由于现代 VM 采用分代收集算法, 因此 Java 堆从 GC 的角度还可以 细分为: 新生代(Eden 区、From Survivor 区和 To Survivor 区)和老年代。</li></ul><p>这里又涉及到 GC 相关的内容。一个点一个的深挖下去都是一片汪洋。</p>]]></content>
    
    
    <categories>
      
      <category>Java面试题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用travis ci持续集成hexo博客，实现自动化部署</title>
    <link href="undefined2019/09/29/hexo-travis/"/>
    <url>2019/09/29/hexo-travis/</url>
    
    <content type="html"><![CDATA[<p>最近用Hexo从新搭建博客，结果涨了一波见识，认识了Travis CI这个东西。</p><a id="more"></a><h2 id="Travis-CI是什么？"><a href="#Travis-CI是什么？" class="headerlink" title="Travis CI是什么？"></a>Travis CI是什么？</h2><h3 id="什么是CI？"><a href="#什么是CI？" class="headerlink" title="什么是CI？"></a>什么是CI？</h3><p>CI（持续集成）：只要有代码变更，就会触发CI服务器，对项目进行自动化构建，测试以及最终的自动化部署。</p><p>Travis CI也就是一个在线的CI服务。傻瓜式操作，与github是好基友，只要你的github项目是public，你就可以免费使用。</p><h2 id="集成实现自动化部署"><a href="#集成实现自动化部署" class="headerlink" title="集成实现自动化部署"></a>集成实现自动化部署</h2><p>记得很早之前搭建hexo博客的时候，还没有这个操作，当时有个很大的问题，就是换了电脑会非常麻烦。现在有了这个操作，真的是如有神助。</p><p>以下是官网文档：</p><hr><p>1.新建一个 repository。如果你希望你的站点能通过 &lt;你的 GitHub 用户名&gt;.github.io 域名访问，你的 repository 应该直接命名为 &lt;你的 GitHub 用户名&gt;.github.io。<br>2.将你的 Hexo 站点文件夹推送到 repository 中。默认情况下不应该 public 目录将不会被推送到 repository 中，你应该检查 .gitignore 文件中是否包含 public 一行，如果没有请加上。<br>3.将 Travis CI 添加到你的 GitHub 账户中。<br>4.前往 GitHub 的 Applications settings，配置 Travis CI 权限，使其能够访问你的 repository。<br>5.你应该会被重定向到 Travis CI 的页面。如果没有，请 手动前往。<br>6.在浏览器新建一个标签页，前往 GitHub 新建 Personal Access Token，只勾选 repo 的权限并生成一个新的 Token。Token 生成后请复制并保存好。<br>7.回到 Travis CI，前往你的 repository 的设置页面，在 Environment Variables 下新建一个环境变量，Name 为 GH_TOKEN，Value 为刚才你在 GitHub 生成的 Token。确保 DISPLAY VALUE IN BUILD LOG 保持 不被勾选 避免你的 Token 泄漏。点击 Add 保存。<br>8.在你的 Hexo 站点文件夹中新建一个 .travis.yml 文件：</p><pre><code class="yml">sudo: falselanguage: node_jsnode_js:  - 10 # use nodejs v10 LTScache: npmbranches:  only:    - master # build master branch onlyscript:  - hexo generate # generate static filesdeploy:  provider: pages  skip-cleanup: true  github-token: $GH_TOKEN  keep-history: true  on:    branch: master  local-dir: public</code></pre><p>9.将 .travis.yml 推送到 repository 中。Travis CI 应该会自动开始运行，并将生成的文件推送到同一 repository 下的 gh-pages 分支下<br>10.在 GitHub 中前往你的 repository 的设置页面，修改 GitHub Pages 的部署分支为 gh-pages。<br>11.前往 https://&lt;你的 GitHub 用户名&gt;.github.io 查看你的站点是否可以访问。这可能需要一些时间。</p><hr><p>直接按照官网的方法，存在一定的问题。</p><p>1.用 &lt;你的 GitHub 用户名&gt;.github.io 命名的项目，Travis CI 无法给我们自动新建 gh-pages 分支。<br>2.无法修改 GitHub Pages 的展示分支，默认是 master。也就达不到我们用 master 来管理博客（跟换电脑只需拉代码即可），用 gh—pages 部署静态博客以展示的目的。</p><p>个人实践后建议，新建项目的时候不要用 &lt;你的 GitHub 用户名&gt;.github.io 这样的方式命名，直接用别的名称命名。这样的话上面两个问题直接解决。</p><p>有人会说，那我怎么用 &lt;你的 GitHub 用户名&gt;.github.io 这个地址访问博客呢。其实很简单 &lt;你的 GitHub 用户名&gt;.github.io/&lt;项目名称&gt; 这个地址接可以访问。可以看看项目的 Setting 里的 GitHub Pages 相关的配置就很直观了。</p><p><img src="https://s2.ax1x.com/2019/09/29/u8rM1x.md.jpg" srcset="/blog/img/loading.gif" alt="GitHub Pages"></p><p>最后在注意一个问题，这样修改以后有些主题的静态资源就无法正常访问了，注意很重要的一个配置，根目录下的_config.yml里面的url和root配置需要更改</p><pre><code class="yml"># URL## If your site is put in a subdirectory, set url as &#39;http://yoursite.com/child&#39; and root as &#39;/child/&#39;url: https://iamnotmorty.github.io/blogroot: /blog/permalink: :year/:month/:day/:title/permalink_defaults:</code></pre><p>这里还会有个坑在，就是即使这样修改了，静态资源诸如css/js之类的还是无法加载，部署上去以后就会有问题。这时就要看看主题里面的页面是如何获取这些资源的路径的，找到相应的配置或者代码中进行修改，所以会有一定的差异。这里本人也有个疑问，就是官方说的会添加根路径，难道不是配置文件里的？有待求证，简单暴力的做法就是找到相应位置补全路径，有一些会有配置文件，改一下就好里。</p><p>后续会继续补充Hexo遇到的坑，以及Travis CI和持续集成相关的内容。</p>]]></content>
    
    
    
    <tags>
      
      <tag>Travis CI</tag>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World（测试文章）</title>
    <link href="undefined2019/09/28/hello-world/"/>
    <url>2019/09/28/hello-world/</url>
    
    <content type="html"><![CDATA[<p>未雨绸缪，富有耐心，律己严格，不偏不倚。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>使用POI读取Excel数据踩坑记</title>
    <link href="undefined2019/05/12/%E4%BD%BF%E7%94%A8POI%E8%AF%BB%E5%8F%96Excel%E6%95%B0%E6%8D%AE%E8%B8%A9%E5%9D%91%E8%AE%B0/"/>
    <url>2019/05/12/%E4%BD%BF%E7%94%A8POI%E8%AF%BB%E5%8F%96Excel%E6%95%B0%E6%8D%AE%E8%B8%A9%E5%9D%91%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="Spring-Boot项目使用Apache-POI读取Excel文件数据"><a href="#Spring-Boot项目使用Apache-POI读取Excel文件数据" class="headerlink" title="Spring Boot项目使用Apache POI读取Excel文件数据"></a>Spring Boot项目使用Apache POI读取Excel文件数据</h1><a id="more"></a><hr><h2 id="第一、导入依赖"><a href="#第一、导入依赖" class="headerlink" title="第一、导入依赖"></a>第一、导入依赖</h2><pre><code class="xml">      &lt;dependency&gt;        &lt;groupId&gt;org.apache.poi&lt;/groupId&gt;        &lt;artifactId&gt;poi&lt;/artifactId&gt;        &lt;version&gt;4.0.1&lt;/version&gt;      &lt;/dependency&gt;</code></pre><p>这里有一个地方需要注意，这个包只能支持xls格式的Excel文件。但是2003年以后，我们现在常用的格式是xlsx格式的文件。所以要正常使用的话还需导入另一个依赖。</p><pre><code class="xml">    &lt;dependency&gt;      &lt;groupId&gt;org.apache.poi&lt;/groupId&gt;      &lt;artifactId&gt;poi-ooxml&lt;/artifactId&gt;      &lt;version&gt;4.0.1&lt;/version&gt;    &lt;/dependency&gt;</code></pre><p>导入这两个依赖以后就可以使用POI相关的API了。</p><h2 id="第二、使用"><a href="#第二、使用" class="headerlink" title="第二、使用"></a>第二、使用</h2><p>直接上代码</p><pre><code class="java">@RequestController@RequestMapping(&quot;/file&quot;)public class Controller {    @PostMapping(&quot;/parse.json&quot;)    /**这里直接返回为空（根据需求），关键是里面的代码不是返回什么。    *用@RequestParam注解接收参数，对象为    *org.springframework.web.multipart.MultipartFile    */    public void parse(@RequestParam MultipartFile file) {        //检查文件        checkFile(file);        //获取workbook对象        Workbook workbook = getWorkBook(file);        //获取sheet对象        Sheet sheet = workbook.getSheetAt(0);        for (Row row : sheet) {            if (row.getRowNum() == 0) {                continue;            }            //在这里就可以获取cell对象，从而读取Excel的数据了            Cell cell = row.getCell(0);            //cell.getStringCellValue();            //cell.getNumericCellValue();            //...等等方法        }    }    public static void checkFile(MultipartFile file) throws IOException {        //判断文件是否存在        if (null == file) {            logger.error(&quot;文件不存在！&quot;);            throw new FileNotFoundException(&quot;文件不存在！&quot;);        }        //获得文件名        String fileName = file.getOriginalFilename();        //判断文件是否是excel文件        if (!fileName.endsWith(&quot;xls&quot;) &amp;&amp; !fileName.endsWith(&quot;xlsx&quot;)) {            logger.error(fileName + &quot;不是excel文件&quot;);            throw new IOException(fileName + &quot;不是excel文件&quot;);        }    }    public static Workbook getWorkbook(MultipartFile file) {        //获得文件名        String fileName = file.getOriginalFilename();        //创建Workbook工作薄对象，表示整个excel        Workbook workbook = null;        try {            //获取excel文件的io流            InputStream is = file.getInputStream();            //根据文件后缀名不同(xls和xlsx)获得不同的Workbook实现类对象            if (fileName.endsWith(&quot;xls&quot;)) {                //2003                workbook = new HSSFWorkbook(is);            } else if (fileName.endsWith(&quot;xlsx&quot;)) {                //2007                workbook = new XSSFWorkbook(is);            }        } catch (IOException e) {            logger.info(e.getMessage());        }        return workbook;    }}</code></pre><p>大致过程是这样，具体有些还需要根据场景</p><h2 id="第三、遇到的坑"><a href="#第三、遇到的坑" class="headerlink" title="第三、遇到的坑"></a>第三、遇到的坑</h2><h3 id="（一）getLastRowNum-方法获取行数的问题这里是n-1行，而getPhysicalNumberOfRows-获取的是n行。注：标题行会忽略"><a href="#（一）getLastRowNum-方法获取行数的问题这里是n-1行，而getPhysicalNumberOfRows-获取的是n行。注：标题行会忽略" class="headerlink" title="（一）getLastRowNum()方法获取行数的问题这里是n-1行，而getPhysicalNumberOfRows()获取的是n行。注：标题行会忽略"></a>（一）getLastRowNum()方法获取行数的问题这里是n-1行，而getPhysicalNumberOfRows()获取的是n行。注：标题行会忽略</h3><h3 id="（二）注意获取值的时候的格式，这里又有一个坑就是服务器环境系统不同，单元格类型会有差异。解决的想法是，统一写入格式零时存入本地在读取。"><a href="#（二）注意获取值的时候的格式，这里又有一个坑就是服务器环境系统不同，单元格类型会有差异。解决的想法是，统一写入格式零时存入本地在读取。" class="headerlink" title="（二）注意获取值的时候的格式，这里又有一个坑就是服务器环境系统不同，单元格类型会有差异。解决的想法是，统一写入格式零时存入本地在读取。"></a>（二）注意获取值的时候的格式，这里又有一个坑就是服务器环境系统不同，单元格类型会有差异。解决的想法是，统一写入格式零时存入本地在读取。</h3><h3 id="（三）跨服务存取，如果直接传递数据流有可能会丢失。所以最好还是临时存入本地，再获取数据流。"><a href="#（三）跨服务存取，如果直接传递数据流有可能会丢失。所以最好还是临时存入本地，再获取数据流。" class="headerlink" title="（三）跨服务存取，如果直接传递数据流有可能会丢失。所以最好还是临时存入本地，再获取数据流。"></a>（三）跨服务存取，如果直接传递数据流有可能会丢失。所以最好还是临时存入本地，再获取数据流。</h3>]]></content>
    
    
    
    <tags>
      
      <tag>实际开发过程遇到的问题</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java--向上转型</title>
    <link href="undefined2017/11/27/Java-%E5%90%91%E4%B8%8A%E8%BD%AC%E5%9E%8B/"/>
    <url>2017/11/27/Java-%E5%90%91%E4%B8%8A%E8%BD%AC%E5%9E%8B/</url>
    
    <content type="html"><![CDATA[<p>要把OOP思想彻底了然于心，还有很长的路要走。今天被问了一个问题，用语言来描述就是，用向上转型和不用向上转型有什么区别。<br>具体代码如下：</p><pre><code class="java">//使用向上转型EmployeeDao employeeDao = new EmployeeDaoImpl();//不使用向上转型EmployeeDaoImpl employeeDao1 = new EmployeeDaoImpl();</code></pre><a id="more"></a><p>两者唯一的区别就是，前者用接口类型对象指向实现类实例对象的引用，后者类型同意，创建一个实现类的实例对象。<br>那这两种写法到底有什么区别呢？  </p><p>设想一个场景，我们要调用很多employeeDao1对象的方法，于是就会写大量的</p><pre><code class="java">employeeDao1.getByName();employeeDao1.getByID();employeeDao1.add();employeeDao1.delete();employeeDao1.update();employeeDao1.show();.....</code></pre><p>此时我们的老板突然说我们数据库不用MySQL，改用Oracle，这个时候我们就要修改实现类里面实现方法的代码。当然有点基础的人都知道，如果不涉及方法的增加和改变，并且EmployeeDao接口里面一般是不做改变的。但是会发现在这种情况下，好像也并不用修改很多。那么来看，这时候针对不同的客户要求，有家要MySQL，有家要Oracle。就要新增加一个针对Oracle的实现类，比如叫EmployeeDaoImplForO</p><pre><code class="java">EmployeeDaoImplForO edifo = new EmployeeDaoImplForO();//这个时候就要修改之前的所有的employeeDao1为edifo，修改量非常的大。//但是使用接口类型去调用方法则完全不同，这样就不需要去关注实现类了，直接拿过来new一个实现类给接口类型对象，下面的代码就不需要修改。</code></pre><p>不过这种思想在这个例子下不是特别明显，因为可以把对象名称改成一样的，也不需要修改很多代码。但是这里的问题根本还是OOP思想，这样就不符合这个思想，若是遇到有些情况，这样便行不通了。不过想来想去还是有点硌着，心里还不是很明白，这就有待于代码量的增加和项目经验的增加慢慢的去了然于心，先记住这样用更好。遇到面试可以用反例去说给面试官听。</p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
      <category>OOP</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>OOP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>浅谈Java OOP和JavaScript OOP-之四--多态(下--JavaScript)</title>
    <link href="undefined2017/11/24/%E6%B5%85%E8%B0%88Java%20OOP%E5%92%8CJavaScript%20OOP-%E4%B9%8B%E5%9B%9B-%E5%A4%9A%E6%80%81%EF%BC%88%E4%B8%8B-JavaScript%EF%BC%89/"/>
    <url>2017/11/24/%E6%B5%85%E8%B0%88Java%20OOP%E5%92%8CJavaScript%20OOP-%E4%B9%8B%E5%9B%9B-%E5%A4%9A%E6%80%81%EF%BC%88%E4%B8%8B-JavaScript%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p>在Java的多态里已经讲过多态的基本概念，这里不再赘述。</p><hr><p>由于语言特性的问题，JavaScript多态的实现机制不同于Java，这和JavaScript没有类的，所以略有不同。</p><a id="more"></a><pre><code class="javascript">//先用一个不需要继承实现的多态function sayAge(object) {  if(object instanceof Child){      console.log(&#39;10&#39;);  }else if(object instanceof Parent){      console.log(&#39;30&#39;);  }}sayAge(child);   // &#39;10&#39;sayAge(parent);  // &#39;30&#39;</code></pre><p>这是一个在知乎看到的例子，满足了多态的基本定义。同一操作作用于不同的对象，可以有不同的解释，产生不同的执行结果。</p><hr><p>涉及到继承，直接拿ES6来做对比</p><pre><code class="javascript">class People{  revolt(){    console.log(&quot;revolt&quot;);  }}class Man extends People{  revolt(){    console.log(&quot;给你一拳&quot;)；  }}class Woman extends People{  revolt(){    console.log(&quot;给你一巴掌&quot;)；  }}</code></pre>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
      <category>OOP</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>OOP</tag>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>浅谈Java OOP和JavaScript OOP 之四--多态(上-Java)</title>
    <link href="undefined2017/11/22/%E6%B5%85%E8%B0%88Java%20OOP%E5%92%8CJavaScript%20OOP-%E4%B9%8B%E5%9B%9B-%E5%A4%9A%E6%80%81%EF%BC%88%E4%B8%8A--Java%EF%BC%89/"/>
    <url>2017/11/22/%E6%B5%85%E8%B0%88Java%20OOP%E5%92%8CJavaScript%20OOP-%E4%B9%8B%E5%9B%9B-%E5%A4%9A%E6%80%81%EF%BC%88%E4%B8%8A--Java%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="什么是多态？"><a href="#什么是多态？" class="headerlink" title="什么是多态？"></a>什么是多态？</h1><blockquote><p>多态：同一操作作用于不同的对象，可以有不同的解释，产生不同的执行结果</p></blockquote><p>这是百度百科的一个解释</p><blockquote><p>多态意味着“多种形态”。在面向对象的编程当中，你有相同的’脸’（基类里一种通用的接口），以及使用该接口的不同的形式：即各种不同的动态绑定方法的版本。</p></blockquote><p>这是Java编程思想里的解释，由此可见，在面向对象编程中多态必须是动态绑定实现的，注意关键词“动态绑定”。这样就直接否定了Java里方法重载是多态的一种实现形式。因为，方法重载是在编译时发生的，也就是“静态绑定”的，所以将不再纠结重载是否是多态的问题。</p><a id="more"></a><hr><p>Java中的多态</p><pre><code class="java">//父类public class People {    public People() {}    public void revolt() {        System.out.println(&quot;revolt&quot;);    }}//子类public class Women extends People {    public Women() {}    //@Override    public void revolt() {        System.out.println(&quot;给你一巴掌&quot;);    }}public class Man extends People {    public Man() {}    //@Override    public void revolt() {        System.out.println(&quot;给你一拳头&quot;);    }}//测试类public class You {    //你有一个打人的方法    public static void play(People people) {        people.revolt();    }    public static void main(String[] args) {        play(new Women());        play(new Man());    }}</code></pre><p>理解：有一天我叫你去打指定的人，然后想看看不同的人有什么不同的反应。这里的重写就是人被你打了都会反抗，但是不同性别的人有不同的反抗。而你事先并不知道那个人会怎么反抗，我指这个你就打这个，我指那个你就打那个。由此引出多态的三要素</p><ul><li>首先被你打的都是人–继承（或接口实现）</li><li>不同的人有不同的反抗方式，但是都会反抗–重写（动态绑定子类方法）</li><li>父类引用指向子类对象（向上转型）</li></ul><p>父类引用指向子类对象（向上转型），这个的作用可以实现如You类里的。不用再为不同的子类型去写相同的执行方式。比如：</p><pre><code class="java">public class You {    //你有一个打人的方法  //这个方法只能打Women    public static void play(Women people) {        people.revolt();    }  //要打Man只能重新定义方法  public static void play(Man people) {        people.revolt();    }  //这样每打一个人就要写一个打一个人的方法，有很多人的时候就很麻烦了    public static void main(String[] args) {        play(new Women());        play(new Man());    }}</code></pre><p>多态的作用</p><blockquote><p>消除数据类型之间的耦合，增加代码的可读性和可扩展性，改善代码的组织结构</p></blockquote><p>理解：有新的子类（人）要添加时，只需重写方法就可以，不会影响其他子类，（你去打的时候）也不用创建新的打人方法，直接去打就可以了。用接口实现道理相同，实现类去实现接口的抽象方法。然后将接口类型引用指向实现类的对象。</p><ul><li>这样就体现出向上转型为编程带来的便捷性。</li></ul><p>但是这样的方式也有一个致命的缺点，比如，人都是会反抗的合乎常理。这里有个酒喝得不省人事的人，他不会反抗，也就是说他有个不反抗的方法，那用向上转型是没法调用的。这里会用到向下转型。先看段代码：</p><pre><code class="java">public class Drunkard extends People {    //这是一个喝醉的人    public Drunkard() {}    //喝多了不还手的方法    public void revoltNot() {        System.out.println(&quot;我喝多了，不还手&quot;)；    }}//你去打他public class You {    //你有一个打人的方法    public static void play(People people) {        people.revolt();    }    public static void main(String[] args) {        play(new Women());        play(new Man());        play(new Drunkard());    }}//这样子的话他还是会调用继承过来的反抗方法，那要调用他喝醉的方法就要把他灌醉，变成喝醉的人。public class You {    //你有一个打喝醉的人的方法    public static void playDrinking(People people) {        ((Drunkard)people).revolt();    }    public static void main(String[] args) {        playDrinking(new Drunkard());    }}</code></pre><p>写到这里发现向下转型用这个例子描述不是特别恰当，下次将重新整理一篇有关类型转换的文章。</p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
      <category>OOP</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>OOP</tag>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>浅谈Java OOP和JavaScript OOP 之三--封装</title>
    <link href="undefined2017/11/21/%E6%B5%85%E8%B0%88Java%20OOP%E5%92%8CJavaScript%20OOP-%E4%B9%8B%E4%B8%89-%E5%B0%81%E8%A3%85/"/>
    <url>2017/11/21/%E6%B5%85%E8%B0%88Java%20OOP%E5%92%8CJavaScript%20OOP-%E4%B9%8B%E4%B8%89-%E5%B0%81%E8%A3%85/</url>
    
    <content type="html"><![CDATA[<p>封装是面向对象程序语言对客观世界的模拟，在客观世界中对象的成员变量(用于描述对象的状态数据)都被隐藏在对象内部，外部无法直接操作和修改。<br>对一个类或对象实现良好的封装，可以实现以下目的。</p><blockquote><ul><li>隐藏类的实现细节</li><li>让使用者只能通过事先预定的方法来访问数据，从而可以在该方法里加入控制逻辑，限制对成员变量的不合理访问。</li><li>可进行数据检查，从而有利于保证对象信息的完整性。</li><li>便于修改，提高代码的可维护性。</li></ul></blockquote><a id="more"></a><p>为了实现良好的封装，需要考虑两方面。</p><blockquote><ul><li>将对象的成员变量和实现细节隐藏起来，不允许外部直接访问。</li><li>把方法暴露出来，让方法来控制对这些成员变量进行安全的访问操作。</li></ul></blockquote><p>Java的封装</p><pre><code class="java">public class Person1{  private String name;  private int age;  private String food = &quot;什么都吃&quot;;  public void setName(String name){    this.name = name;  }  public String getName(){    return name;  }  public void setAge(int age){    this.age = age;  }  public int getAge(){    return age;  }  public void eat(){    System.out.println(food);  }}</code></pre><p>一个基本的Java封装，用setter和getter方法操控私有属性。也乐意用构造方法，可以直接传递参数生成实例对象。</p><hr><p>JavaScript的封装</p><pre><code class="javascript">//对象的定义var person1 = {  food: &quot;什么都吃&quot;};person1.name = &quot;Jack&quot;;person1.age = 25;console.log(person1.name);//&quot;Jack&quot;</code></pre><p>person1.name相当于执行了setter和getter的操作,要创建不同的对象要一次次来，没有可复用性可言。</p><pre><code class="javascript">//通过函数调用返回对象function Person(name, age){  return {    name: name,    age: age,    food: &quot;什么都吃&quot;    //eat: function(){    //  console.log(this.food);    //}  }}var person1 = Person(&quot;a&quot;, 28);var person2 = Person(&quot;b&quot;, 22);</code></pre><p>两个对象之间没有什么内在联系</p><pre><code class="javascript">//构造函数的封装function Person(name, age){  this.name = name;  this.age = age;  this.food = &quot;什么都吃&quot;;  this.eat = funciton(){    console.log(this.food);  }}var person1 =new Person(&quot;a&quot;, 28);var person2 =new Person(&quot;b&quot;, 22);</code></pre><p>person1和person2都是Person的实例对象，分别都创建了自己的实例属性，但是两个对象都是Person的实例，他们本来就是“什么都吃”，但是这种方式在实例对象里都有这个属性,甚至创建更多实例对象就会有更多的一样的food属性生成，造成内存的浪费。(eat方法也是一样的的重复创建)</p><pre><code class="javascript">//prototype模式//把共有属性和方法添加到原型上function Person(name, age){  this.name = name;  this.age = age;}Person.prototype.food = &quot;什么都吃&quot;;Person.prototype.eat = function(){  console.log(this.food);}var person1 = new Person(&quot;a&quot;, 28);···var personN </code></pre><p>这里不管创建多少个不相同的Person实例对象，他们都是公用food属性和eat方法，同时也体现了实例之间的关系。就像一个机器，可以不断生产产品，但是编号和出场时间不同。</p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
      <category>OOP</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>OOP</tag>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>浅谈Java OOP和JavaScript OOP 之二--继承</title>
    <link href="undefined2017/11/20/%E6%B5%85%E8%B0%88Java%20OOP%E5%92%8CJavaScript%20OOP-%E4%B9%8B%E4%BA%8C-%E7%BB%A7%E6%89%BF/"/>
    <url>2017/11/20/%E6%B5%85%E8%B0%88Java%20OOP%E5%92%8CJavaScript%20OOP-%E4%B9%8B%E4%BA%8C-%E7%BB%A7%E6%89%BF/</url>
    
    <content type="html"><![CDATA[<ul><li>Java继承：用extends关键字，实现SubType继承SuperType</li><li>JavaScript继承：在ES6之前，没有extends关键字，主要靠几种模式实现继承（比如：构造函数继承和原型继承还有组合继承等）。ES6之后可以像Java一样通过extends关键字，不过底层实现还是原型继承。<a id="more"></a></li></ul><hr><p>Java继承</p><pre><code class="java">//Java//父类class SuperType {  String name;  int age;  String job;  String[] friends = {&quot;Jack&quot;, &quot;Mack&quot;, &quot;Salle&quot;}  SuperType(String name, int age, String job){    this.name = name;    this.age = age;    this.job = job;  }  void getPeople(){    System.out.println(this.name + &quot; is &quot; + this.age + &quot; years old&quot; + &quot; and he is a &quot; + this.job);  }  void getFriends(){    System.out.println(this.friends);  }}//子类class SubType extends SuperType {  SubType(String name, int age, String job) {    super(name, age, job);  }  @override  //void getPeople(){}}//Testclass Test {  public static void main(String[] args){    SubType people = new SubType(&quot;Nicholas&quot;, 38, &quot;Software Engineer&quot;);    people.getPeople();    //Nicholas is 38 years old and he is a Software Engineer    people.getFriends();    //[&quot;Jack&quot;, &quot;Mack&quot;, &quot;Salle&quot;]  }}</code></pre><p>JavaScrpt继承</p><ul><li><p>原型链继承</p><pre><code class="javascript">function SuperType (name, age) {  this.name = name;  this.age = age;  this.friends = [&quot;a&quot;, &quot;b&quot;];}SuperType.prototype.say = function(){  console.log(&#39;hello, my name is &#39; + this.name);};SuperType.prototype.sayFriends = function(){  console.log(this.friends);};function SubType() {}SubType.prototype = new SuperType(&#39;Nicholas&#39;);var man1 = new SubType();man1.friends.push(&quot;c&quot;);man1.say(); //hello, my name is Nicholasman1.sayFriends();//[&quot;a&quot;, &quot;b&quot;, &quot;c&quot;]var man2 = new SubType();man2.sayFriends();//[&quot;a&quot;, &quot;b&quot;, &quot;c&quot;]console.log(man1.say === man2.say);//trueconsole.log(man1.name === man2.name);//true</code></pre><p>事实上这里的man1和man2都是空对象，属性都是顺着原型链往上找到SubType上的name和say方法。由此也导致了实例属性共享，任何一个实例改变属性，都会影响其他实例。所以这种继承并没有很大的作用。</p></li><li><p>利用构造函数继承</p><pre><code class="javascript">function SuperType (name, age) {  this.name = name;  this.age = age;}SuperType.prototype.say = function(){  console.log(&#39;hello, my name is &#39; + this.name);};function SubType(name, age) {  SuperType.apply(this, arguments);}//SubType.prototype = new SuperType(&#39;Nicholas&#39;);var man1 = new SubType(&#39;joe&#39;);var man2 = new SubType(&#39;david&#39;);console.log(man1.name === man2.name);//falseman1.say(); //say is not a function</code></pre><p>这里继承的属性，非常的优雅，但是却无法继承父类型的原型方法。由此就引出组合继承</p></li><li><p>组合继承</p><pre><code class="javascript">function SuperType (name, age) {  this.name = name; this.age = age;}SuperType.prototype.say = function(){  console.log(&#39;hello, my name is &#39; + this.name);};function SubType(name, age) {  SuperType.apply(this, arguments);}SubType.prototype = new SuperType();var man1 = new SubType(&#39;joe&#39;);var man2 = new SubType(&#39;david&#39;);console.log(man1.name === man2.name);//falseconsole.log(man1.say === man2.say);//trueman1.say(); //hello, my name is joe</code></pre><p>这里虽然具备了两种继承特点，但是重复的“继承”了实例属性,性能上有缺陷。并且在应对引用类型实例属性时，还是会共享实例属性</p></li><li><p>寄生组合继承</p><pre><code class="javascript">function SuperType (name, age) {          this.name = name;          this.age = age;      }SuperType.prototype.say = function(){  console.log(&#39;hello, my name is &#39; + this.name);};function SubType(name, age) {  SuperType.apply(this, arguments);}SubType.prototype = Object.create(SuperType.prototype);//a.SubType.prototype.constructor = SubType;//b.var man1 = new SubType(&#39;pursue&#39;);var man2 = new SubType(&#39;joe&#39;);console.log(man1.say == man2.say);console.log(man1.name == man2.name);</code></pre><p>a.创建一个SuperType的原型的副本，并让SubType的原型指向它。由于是一个副本，所以不会向SuperType的应用类型传递，解决了实力属性共享的问题。<br>b.a这一步操作重写了原型，出于严谨或者避免一些特殊的情况，重新指定构造函数</p><pre><code class="javascript">//a相当于function create(obj){  function T(){};  T.prototype = obj;  return new T();}</code></pre></li><li><p>ES6 class继承</p><pre><code class="javascript">class SuperType{  constructor(name,age){      this.name = name;      this.age = age;  }  say(){      console.log(&#39;hello, my name is &#39; + this.name);  }}</code></pre></li></ul><p>class SubType extends SuperType{<br>    constructor(name, age, job){<br>        super(name, age);<br>        this.job = job;<br>    }<br>}<br>```</p><hr><p>所以说，Java的继承更加存粹一些“类-继承”，而JavaScript就算有了class，那也是基于原型的继承模式，从《你不知道的JavaScript》里，作者给出了一个更合理的说法，这是一种委托。</p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
      <category>OOP</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>OOP</tag>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>浅谈Java OOP和JavaScript OOP 之一--类</title>
    <link href="undefined2017/11/01/%E6%B5%85%E8%B0%88Java%20OOP%E5%92%8CJavaScript%20OOP-%E4%B9%8B%E4%B8%80-%E7%B1%BB/"/>
    <url>2017/11/01/%E6%B5%85%E8%B0%88Java%20OOP%E5%92%8CJavaScript%20OOP-%E4%B9%8B%E4%B8%80-%E7%B1%BB/</url>
    
    <content type="html"><![CDATA[<p>转眼间已参加学习Java有一个星期了，也把自己讨厌Java的心扭转到了热爱的路上，当然最让我着迷的还是JavaScript。慢慢的好像能写一些Java OOP的代码了，对这种纯面向对象语言的学习，一下子打通了我对JavaScript OOP的疑惑，因为互相对比学习，好像也明白了一些Java OOP的所以然。</p><ul><li>Java就是朝着OOP去设计的</li><li>JavaScript可以有很多种编程方式</li><li>在我眼中，Java就是有很悠久历史和规矩的古典乐，而JavaScript就是多变充满激情和套路的摇滚乐。<a id="more"></a></li></ul><hr><p>先来看两段代码</p><pre><code class="java">//Javapublic class SuperType{    String name;    int age;    public SuperType(String name, int age){        this.name = name;        this.age = age;    }    public sayName(){        System.out.println(&quot;Hello, &quot; + this.name);    }}</code></pre><pre><code class="javascript">//JavaScript（ES6）class SuperType{    constructor(name, age){        this.name = name;        this.age = age;    }    sayName(){        console.log(&quot;Hello, &quot; + this.name);    }}</code></pre><p>分析一下，由于JavaScript的ES6内置了classes，所以写出来跟Java视觉上的差距就是只剩下几个关键字的不同了，Java要声明类型，JavaScript不需要，这几乎就是这两门语言的很关键的不同，也决定了Java是“强”，JavaScript是“弱”。<br>Java里有一个SuperType（）构造方法和sayName()普通方法，JavaScript里有构造函数和sayName（）方法，这里JavaScript里与Java不同的地方：</p><ul><li>JavaScript里方法也都是函数（Function）</li><li>Java的方法定义在类里面</li><li>JavaScript的方法看似是定义在“类”里面，实则还是<pre><code class="javascript">SuperType.prototype.sayName = function(){...}</code></pre>所以JavaScript的类只是ES6的语法糖，内部实现还是基于原型的，这里的类也不是真的类，到底还是一个构造函数。</li></ul>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
      <category>OOP</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>OOP</tag>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>更换Github账号后&#39;git push&#39;和&#39;hexo d -g&#39;遇到的问题总结</title>
    <link href="undefined2017/10/22/%E6%9B%B4%E6%8D%A2Github%E8%B4%A6%E5%8F%B7%E5%90%8E-git-push-%E5%92%8C-hexo-d-g-%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93/"/>
    <url>2017/10/22/%E6%9B%B4%E6%8D%A2Github%E8%B4%A6%E5%8F%B7%E5%90%8E-git-push-%E5%92%8C-hexo-d-g-%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<p>遇到问题多思考，多用搜索引擎，问题总归会解决的，不要轻易放弃</p><a id="more"></a><h2 id="问题起因"><a href="#问题起因" class="headerlink" title="问题起因"></a>问题起因</h2><p>由于之前Github账号过于随便的问题，重新注册了Github账号。</p><h2 id="场景回顾"><a href="#场景回顾" class="headerlink" title="场景回顾"></a>场景回顾</h2><p>既然账号都换了，那就博客也重新来吧，之前的反正也是测试用的。<br>于是乎，做好所有准备工作，开干。</p><pre><code class="bush">$ git config --global user.name &quot;xxx&quot; $ git config --global user.email &quot;xxxx@xxx.com&quot;</code></pre><p>正常</p><hr><p>查看git配置</p><pre><code class="bush">$ git config --lis</code></pre><p>好像也没有问题</p><hr><p>生成SSH密钥</p><pre><code class="bush">$ ssh-keygen -t rsa -C &quot;xxxxx@xxx.com&quot;</code></pre><p>生成密钥</p><pre><code class="bush">$ cat ~/.ssh/id_rsa.pub</code></pre><p>出现</p><pre><code class="bush">ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDJPPudl9XqGxHvhs144OIIigWTy3MHD9jkM4bMm7HROEhj/qPUsin/td/YcsXx2HQI4JWTWmQwWD6YqlCx/rwltsYFkmm7OoNqe6kmnt5QRyWyUHX0EAFb/jz7rhA4+B0INHlcIfWlEI8ccnz28UFTwdHbx8JDWOn86ex/nNshDbz+Okc9LREKHt7uamo7WFCO30iCAKQY1bfvqOckTpNnQbFetl+8IJOCa/+q4ISghMB8GzAvdYw5e/SnJPDgMmjx8WO1FBhcpG2eiP4ij1kxeR01zl4B3EXG1o9vtWFXmNYTH7Y64b0tlkynCK1N/DIn9+iQ7wVEJg7AyvUpBhdz xxxxxxxx@xx.com</code></pre><p>让后把这段内容复制进Github里相应位置</p><hr><p>然后测试有没有链接成功</p><pre><code class="bush">$ ssh git@github.com</code></pre><p>根据输出的内容发现好像也成功了</p><h4 id="至此一切正常"><a href="#至此一切正常" class="headerlink" title="至此一切正常"></a>至此一切正常</h4><hr><p>最后省略Hexo的相关操作，假设你也都已经完成，来到最后一步发布</p><pre><code class="bush">$ hexo d -g </code></pre><p>出人意料的出现一大串的内容，当然是报错了。其中包含关键的一段</p><pre><code class="bush">remote: Permission to new-name/practice.git denied to old-name.fatal: unable to access &#39;https://github.com/new-name/origin.git/&#39;: The requested URL returned error: 403</code></pre><p>然后也是各种Goole各种百度，就是没有找到相关的解决办法，乱试一通结果还是不行，包括Github官方给出的解答，好像也没有解决问题，最后功夫不负有心人，我翻到一篇博客，看了一下，大概是本地凭证的问题，我受挫的小心脏那么一琢磨，哎呀，好像有点对路。试试把</p><blockquote><p>控制面板-用户账户-凭据管理器-Windows凭据</p></blockquote><h4 id="可以看到-git-https-github-com"><a href="#可以看到-git-https-github-com" class="headerlink" title="可以看到 git:https://github.com"></a>可以看到 git:<a href="https://github.com" target="_blank" rel="noopener">https://github.com</a></h4><h4 id="点开可以看到一个账号，那个是旧的账户。点击编辑，修改为现在的账户和密码就可以了"><a href="#点开可以看到一个账号，那个是旧的账户。点击编辑，修改为现在的账户和密码就可以了" class="headerlink" title="点开可以看到一个账号，那个是旧的账户。点击编辑，修改为现在的账户和密码就可以了"></a>点开可以看到一个账号，那个是旧的账户。点击编辑，修改为现在的账户和密码就可以了</h4><hr><p>最后再次执行 hexo d -g 就成功了，同样的也解决了git push失败的问题。</p>]]></content>
    
    
    <categories>
      
      <category>问题总结</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
      <tag>Github</tag>
      
      <tag>git</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>